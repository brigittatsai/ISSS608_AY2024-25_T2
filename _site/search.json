[
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#install-and-load-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#install-and-load-r-packages",
    "title": "Hands-on Exercise 10",
    "section": "1.1 Install and Load R Packages",
    "text": "1.1 Install and Load R Packages\n\npacman::p_load(lubridate, ggthemes, reactable,\nreactablefmtr, gt, gtExtras, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#the-data",
    "title": "Hands-on Exercise 10",
    "section": "2.1 The Data",
    "text": "2.1 The Data\nIn this exercise, we will use a personal database in microsoft access mdb format called Coffee Chain"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#import-data",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#import-data",
    "title": "Hands-on Exercise 10",
    "section": "2.2 Import Data",
    "text": "2.2 Import Data\nRODBC package will be used to import a database query table into R\n\nlibrary(RODBC)\ncon &lt;- odbcConnectAccess2007('data/Coffee Chain.mdb')\ncoffeechain &lt;- sqlFetch(con, 'CoffeeChain Query')\nwrite_rds(coffeechain, \"data/CoffeeChain.rds\")\nodbcClose(con)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#data-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#data-preparation",
    "title": "Hands-on Exercise 10",
    "section": "2.3 Data Preparation",
    "text": "2.3 Data Preparation\nThe code below is used to aggregate Sales and Budgeted Sales at Product Level\n\nproduct &lt;- coffeechain %&gt;%\n  group_by(`Product`) %&gt;%\n  summarise(`target` = sum(`Budget Sales`),\n            `current` = sum(`Sales`)) %&gt;%\n  ungroup()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#bullet-chart-in-ggplot2",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#bullet-chart-in-ggplot2",
    "title": "Hands-on Exercise 10",
    "section": "2.4 Bullet Chart in ggplot2",
    "text": "2.4 Bullet Chart in ggplot2\n\nggplot(product, aes(Product, current)) + \n  geom_col(aes(Product, max(target) * 1.01),\n           fill=\"grey85\", width=0.85) +\n  geom_col(aes(Product, target * 0.75),\n           fill=\"grey60\", width=0.85) +\n  geom_col(aes(Product, target * 0.5),\n           fill=\"grey50\", width=0.85) +\n  geom_col(aes(Product, current), \n           width=0.35,\n           fill = \"black\") + \n  geom_errorbar(aes(y = target,\n                    x = Product, \n                    ymin = target,\n                    ymax= target), \n                width = .4,\n                colour = \"red\",\n                size = 1) +\n  coord_flip()\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#data-preparation-1",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#data-preparation-1",
    "title": "Hands-on Exercise 10",
    "section": "3.1 Data Preparation",
    "text": "3.1 Data Preparation\n\nsales_report &lt;- coffeechain %&gt;%\n  filter(Date &gt;= \"2013-01-01\") %&gt;%\n  mutate(Month = month(Date)) %&gt;%\n  group_by(Month, Product) %&gt;%\n  summarise(Sales = sum(Sales)) %&gt;%\n  ungroup() %&gt;%\n  select(Month, Product, Sales)\n\n`summarise()` has grouped output by 'Month'. You can override using the\n`.groups` argument.\n\n\nCompute minimum, maximum and ends of the months sales using the code below\n\nmins &lt;- group_by(sales_report, Product) %&gt;% \n  slice(which.min(Sales))\nmaxs &lt;- group_by(sales_report, Product) %&gt;% \n  slice(which.max(Sales))\nends &lt;- group_by(sales_report, Product) %&gt;% \n  filter(Month == max(Month))\n\nCompute 25 and 75 quantiles using the code below\n\nquarts &lt;- sales_report %&gt;%\n  group_by(Product) %&gt;%\n  summarise(quart1 = quantile(Sales, \n                              0.25),\n            quart2 = quantile(Sales, \n                              0.75)) %&gt;%\n  right_join(sales_report)\n\nJoining with `by = join_by(Product)`"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#sparklines",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#sparklines",
    "title": "Hands-on Exercise 10",
    "section": "3.2 Sparklines",
    "text": "3.2 Sparklines\n\nggplot(sales_report, aes(x=Month, y=Sales)) + \n  facet_grid(Product ~ ., scales = \"free_y\") + \n  geom_ribbon(data = quarts, aes(ymin = quart1, max = quart2), \n              fill = 'grey90') +\n  geom_line(size=0.3) +\n  geom_point(data = mins, col = 'red') +\n  geom_point(data = maxs, col = 'blue') +\n  geom_text(data = mins, aes(label = Sales), vjust = -1) +\n  geom_text(data = maxs, aes(label = Sales), vjust = 2.5) +\n  geom_text(data = ends, aes(label = Sales), hjust = 0, nudge_x = 0.5) +\n  geom_text(data = ends, aes(label = Product), hjust = 0, nudge_x = 1.0) +\n  expand_limits(x = max(sales_report$Month) + \n                  (0.25 * (max(sales_report$Month) - min(sales_report$Month)))) +\n  scale_x_continuous(breaks = seq(1, 12, 1)) +\n  scale_y_continuous(expand = c(0.1, 0)) +\n  theme_tufte(base_size = 3, base_family = \"Helvetica\") +\n  theme(axis.title=element_blank(), axis.text.y = element_blank(), \n        axis.ticks = element_blank(), strip.text = element_blank())\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#plotting-a-simple-bullet-chart",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#plotting-a-simple-bullet-chart",
    "title": "Hands-on Exercise 10",
    "section": "4.1 Plotting a simple bullet chart",
    "text": "4.1 Plotting a simple bullet chart\nLet’s plot a bullet chart report using the functions from gt and gtExtras package using the code below.\n\nproduct %&gt;%\n  gt::gt() %&gt;%\n  gt_plt_bullet(column = current, \n              target = target, \n              width = 60,\n              palette = c(\"lightblue\", \n                          \"black\")) %&gt;%\n  gt_theme_538()\n\n\n\n\n\n\n\n\n\n\n\nProduct\ncurrent\n\n\n\n\nAmaretto\n\n\n\n   \n\n\n\nCaffe Latte\n\n\n\n   \n\n\n\nCaffe Mocha\n\n\n\n   \n\n\n\nChamomile\n\n\n\n   \n\n\n\nColombian\n\n\n\n   \n\n\n\nDarjeeling\n\n\n\n   \n\n\n\nDecaf Espresso\n\n\n\n   \n\n\n\nDecaf Irish Cream\n\n\n\n   \n\n\n\nEarl Grey\n\n\n\n   \n\n\n\nGreen Tea\n\n\n\n   \n\n\n\nLemon\n\n\n\n   \n\n\n\nMint\n\n\n\n   \n\n\n\nRegular Espresso"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#data-preparation-2",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#data-preparation-2",
    "title": "Hands-on Exercise 10",
    "section": "5.1 Data Preparation",
    "text": "5.1 Data Preparation\n\nreport &lt;- coffeechain %&gt;%\n  mutate(Year = year(Date)) %&gt;%\n  filter(Year == \"2013\") %&gt;%\n  mutate (Month = month(Date, \n                        label = TRUE, \n                        abbr = TRUE)) %&gt;%\n  group_by(Product, Month) %&gt;%\n  summarise(Sales = sum(Sales)) %&gt;%\n  ungroup()\n\n`summarise()` has grouped output by 'Product'. You can override using the\n`.groups` argument.\n\n\nConvert dataframe to list columns\n\nreport %&gt;%\n  group_by(Product) %&gt;%\n  summarize('Monthly Sales' = list(Sales), \n            .groups = \"drop\")\n\n# A tibble: 13 × 2\n   Product           `Monthly Sales`\n   &lt;chr&gt;             &lt;list&gt;         \n 1 Amaretto          &lt;dbl [12]&gt;     \n 2 Caffe Latte       &lt;dbl [12]&gt;     \n 3 Caffe Mocha       &lt;dbl [12]&gt;     \n 4 Chamomile         &lt;dbl [12]&gt;     \n 5 Colombian         &lt;dbl [12]&gt;     \n 6 Darjeeling        &lt;dbl [12]&gt;     \n 7 Decaf Espresso    &lt;dbl [12]&gt;     \n 8 Decaf Irish Cream &lt;dbl [12]&gt;     \n 9 Earl Grey         &lt;dbl [12]&gt;     \n10 Green Tea         &lt;dbl [12]&gt;     \n11 Lemon             &lt;dbl [12]&gt;     \n12 Mint              &lt;dbl [12]&gt;     \n13 Regular Espresso  &lt;dbl [12]&gt;"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#plotting-coffee-chain-sales-report",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#plotting-coffee-chain-sales-report",
    "title": "Hands-on Exercise 10",
    "section": "5.2 Plotting Coffee Chain Sales Report",
    "text": "5.2 Plotting Coffee Chain Sales Report\n\nreport %&gt;%\n  group_by(Product) %&gt;%\n  summarize('Monthly Sales' = list(Sales), \n            .groups = \"drop\") %&gt;%\n   gt() %&gt;%\n   gt_plt_sparkline('Monthly Sales',\n                    same_limit = FALSE)\n\n\n\n\n\n\n\n\n\n\n\nProduct\nMonthly Sales\n\n\n\n\nAmaretto\n\n\n\n   1.2K\n\n\n\nCaffe Latte\n\n\n\n   1.5K\n\n\n\nCaffe Mocha\n\n\n\n   3.7K\n\n\n\nChamomile\n\n\n\n   3.3K\n\n\n\nColombian\n\n\n\n   5.5K\n\n\n\nDarjeeling\n\n\n\n   3.0K\n\n\n\nDecaf Espresso\n\n\n\n   3.2K\n\n\n\nDecaf Irish Cream\n\n\n\n   2.7K\n\n\n\nEarl Grey\n\n\n\n   3.0K\n\n\n\nGreen Tea\n\n\n\n   1.5K\n\n\n\nLemon\n\n\n\n   4.4K\n\n\n\nMint\n\n\n\n   1.5K\n\n\n\nRegular Espresso\n\n\n\n   1.1K"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#adding-statistics",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#adding-statistics",
    "title": "Hands-on Exercise 10",
    "section": "5.3 Adding Statistics",
    "text": "5.3 Adding Statistics\nCalculate summary statistics using the code below\n\nreport %&gt;% \n  group_by(Product) %&gt;% \n  summarise(\"Min\" = min(Sales, na.rm = T),\n            \"Max\" = max(Sales, na.rm = T),\n            \"Average\" = mean(Sales, na.rm = T)\n            ) %&gt;%\n  gt() %&gt;%\n  fmt_number(columns = 4,\n    decimals = 2)\n\n\n\n\n\n\n\nProduct\nMin\nMax\nAverage\n\n\n\n\nAmaretto\n1016\n1210\n1,119.00\n\n\nCaffe Latte\n1398\n1653\n1,528.33\n\n\nCaffe Mocha\n3322\n3828\n3,613.92\n\n\nChamomile\n2967\n3395\n3,217.42\n\n\nColombian\n5132\n5961\n5,457.25\n\n\nDarjeeling\n2926\n3281\n3,112.67\n\n\nDecaf Espresso\n3181\n3493\n3,326.83\n\n\nDecaf Irish Cream\n2463\n2901\n2,648.25\n\n\nEarl Grey\n2730\n3005\n2,841.83\n\n\nGreen Tea\n1339\n1476\n1,398.75\n\n\nLemon\n3851\n4418\n4,080.83\n\n\nMint\n1388\n1669\n1,519.17\n\n\nRegular Espresso\n890\n1218\n1,023.42"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#combining-the-dataframe",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#combining-the-dataframe",
    "title": "Hands-on Exercise 10",
    "section": "5.4 Combining the dataframe",
    "text": "5.4 Combining the dataframe\n\nspark &lt;- report %&gt;%\n  group_by(Product) %&gt;%\n  summarize('Monthly Sales' = list(Sales), \n            .groups = \"drop\")\n\n\nsales &lt;- report %&gt;% \n  group_by(Product) %&gt;% \n  summarise(\"Min\" = min(Sales, na.rm = T),\n            \"Max\" = max(Sales, na.rm = T),\n            \"Average\" = mean(Sales, na.rm = T)\n            )\n\n\nsales_data = left_join(sales, spark)\n\nJoining with `by = join_by(Product)`"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#plotting-the-updated-data-table",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#plotting-the-updated-data-table",
    "title": "Hands-on Exercise 10",
    "section": "5.5 Plotting the updated data table",
    "text": "5.5 Plotting the updated data table\n\nsales_data %&gt;%\n  gt() %&gt;%\n  gt_plt_sparkline('Monthly Sales',\n                   same_limit = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProduct\nMin\nMax\nAverage\nMonthly Sales\n\n\n\n\nAmaretto\n1016\n1210\n1119.000\n\n\n\n   1.2K\n\n\n\nCaffe Latte\n1398\n1653\n1528.333\n\n\n\n   1.5K\n\n\n\nCaffe Mocha\n3322\n3828\n3613.917\n\n\n\n   3.7K\n\n\n\nChamomile\n2967\n3395\n3217.417\n\n\n\n   3.3K\n\n\n\nColombian\n5132\n5961\n5457.250\n\n\n\n   5.5K\n\n\n\nDarjeeling\n2926\n3281\n3112.667\n\n\n\n   3.0K\n\n\n\nDecaf Espresso\n3181\n3493\n3326.833\n\n\n\n   3.2K\n\n\n\nDecaf Irish Cream\n2463\n2901\n2648.250\n\n\n\n   2.7K\n\n\n\nEarl Grey\n2730\n3005\n2841.833\n\n\n\n   3.0K\n\n\n\nGreen Tea\n1339\n1476\n1398.750\n\n\n\n   1.5K\n\n\n\nLemon\n3851\n4418\n4080.833\n\n\n\n   4.4K\n\n\n\nMint\n1388\n1669\n1519.167\n\n\n\n   1.5K\n\n\n\nRegular Espresso\n890\n1218\n1023.417\n\n\n\n   1.1K"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#combining-bullet-chart-and-sparklines",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#combining-bullet-chart-and-sparklines",
    "title": "Hands-on Exercise 10",
    "section": "5.6 Combining bullet chart and sparklines",
    "text": "5.6 Combining bullet chart and sparklines\nStep 1:\n\nbullet &lt;- coffeechain %&gt;%\n  filter(Date &gt;= \"2013-01-01\") %&gt;%\n  group_by(`Product`) %&gt;%\n  summarise(`Target` = sum(`Budget Sales`),\n            `Actual` = sum(`Sales`)) %&gt;%\n  ungroup() \n\nStep 2:\n\nsales_data = sales_data %&gt;%\n  left_join(bullet)\n\nJoining with `by = join_by(Product)`\n\n\nStep 3:\n\nsales_data %&gt;%\n  gt() %&gt;%\n  gt_plt_sparkline('Monthly Sales') %&gt;%\n  gt_plt_bullet(column = Actual, \n                target = Target, \n                width = 28,\n                palette = c(\"lightblue\", \n                          \"black\")) %&gt;%\n  gt_theme_538()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProduct\nMin\nMax\nAverage\nMonthly Sales\nActual\n\n\n\n\nAmaretto\n1016\n1210\n1119.000\n\n\n\n   1.2K\n\n\n\n\n   \n\n\n\nCaffe Latte\n1398\n1653\n1528.333\n\n\n\n   1.5K\n\n\n\n\n   \n\n\n\nCaffe Mocha\n3322\n3828\n3613.917\n\n\n\n   3.7K\n\n\n\n\n   \n\n\n\nChamomile\n2967\n3395\n3217.417\n\n\n\n   3.3K\n\n\n\n\n   \n\n\n\nColombian\n5132\n5961\n5457.250\n\n\n\n   5.5K\n\n\n\n\n   \n\n\n\nDarjeeling\n2926\n3281\n3112.667\n\n\n\n   3.0K\n\n\n\n\n   \n\n\n\nDecaf Espresso\n3181\n3493\n3326.833\n\n\n\n   3.2K\n\n\n\n\n   \n\n\n\nDecaf Irish Cream\n2463\n2901\n2648.250\n\n\n\n   2.7K\n\n\n\n\n   \n\n\n\nEarl Grey\n2730\n3005\n2841.833\n\n\n\n   3.0K\n\n\n\n\n   \n\n\n\nGreen Tea\n1339\n1476\n1398.750\n\n\n\n   1.5K\n\n\n\n\n   \n\n\n\nLemon\n3851\n4418\n4080.833\n\n\n\n   4.4K\n\n\n\n\n   \n\n\n\nMint\n1388\n1669\n1519.167\n\n\n\n   1.5K\n\n\n\n\n   \n\n\n\nRegular Espresso\n890\n1218\n1023.417\n\n\n\n   1.1K"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#plotting-interactive-sparklines",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#plotting-interactive-sparklines",
    "title": "Hands-on Exercise 10",
    "section": "6.1 Plotting Interactive Sparklines",
    "text": "6.1 Plotting Interactive Sparklines\n\nreport &lt;- report %&gt;%\n  group_by(Product) %&gt;%\n  summarize(`Monthly Sales` = list(Sales))\n\n\nreactable(\n  report,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkline(report)\n    )\n  )\n)\n\nWarning: `bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#changing-the-page-size",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#changing-the-page-size",
    "title": "Hands-on Exercise 10",
    "section": "6.2 Changing the Page Size",
    "text": "6.2 Changing the Page Size\nThe default page size is 10. In the code chunk below, we will change the default setting\n\nreactable(\n  report,\n  defaultPageSize = 13,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkline(report)\n    )\n  )\n)\n\nWarning: `bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#adding-points-and-labels",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#adding-points-and-labels",
    "title": "Hands-on Exercise 10",
    "section": "6.3 Adding Points and Labels",
    "text": "6.3 Adding Points and Labels\n\nreactable(\n  report,\n  defaultPageSize = 13,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkline(\n        report,\n        highlight_points = highlight_points(\n          min = \"red\", max = \"blue\"),\n        labels = c(\"first\", \"last\")\n        )\n    )\n  )\n)\n\nWarning: `bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#adding-reference-line",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#adding-reference-line",
    "title": "Hands-on Exercise 10",
    "section": "6.4 Adding Reference Line",
    "text": "6.4 Adding Reference Line\n\nreactable(\n  report,\n  defaultPageSize = 13,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkline(\n        report,\n        highlight_points = highlight_points(\n          min = \"red\", max = \"blue\"),\n        statline = \"mean\"\n        )\n    )\n  )\n)\n\nWarning: `bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#adding-bandline",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#adding-bandline",
    "title": "Hands-on Exercise 10",
    "section": "6.5 Adding Bandline",
    "text": "6.5 Adding Bandline\n\nreactable(\n  report,\n  defaultPageSize = 13,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkline(\n        report,\n        highlight_points = highlight_points(\n          min = \"red\", max = \"blue\"),\n        line_width = 1,\n        bandline = \"innerquartiles\",\n        bandline_color = \"green\"\n        )\n    )\n  )\n)\n\nWarning: `bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#changing-from-sparkline-to-sparkbar",
    "href": "Hands-on_Ex/Hands-on_Ex10/Hands-on_Ex10.html#changing-from-sparkline-to-sparkbar",
    "title": "Hands-on Exercise 10",
    "section": "6.6 Changing from Sparkline to Sparkbar",
    "text": "6.6 Changing from Sparkline to Sparkbar\n\nreactable(\n  report,\n  defaultPageSize = 13,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkbar(\n        report,\n        highlight_bars = highlight_bars(\n          min = \"red\", max = \"blue\"),\n        bandline = \"innerquartiles\",\n        statline = \"mean\")\n    )\n  )\n)\n\nWarning: `bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'. \n`bindFillRole()` only works on htmltools::tag() objects (e.g., div(), p(), etc.), not objects of type 'shiny.tag.list'."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#install-and-load-r-packages",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#install-and-load-r-packages",
    "title": "Take-home Exercise 3",
    "section": "1.1 Install and Load R Packages",
    "text": "1.1 Install and Load R Packages\n\npacman::p_load(sp, sf, raster, spatstat, tmap, tidyverse,\n               spNetwork, tmaptools, raster, leaflet, patchwork, gridExtra,\n               ggplot2, png, grid, terra, gstat, viridis, automap, stars)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#import-data",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#import-data",
    "title": "Take-home Exercise 3",
    "section": "1.2 Import Data",
    "text": "1.2 Import Data"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#import-aspatial-data",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#import-aspatial-data",
    "title": "Take-home Exercise 3",
    "section": "2.1 Import Aspatial Data",
    "text": "2.1 Import Aspatial Data\n\nweather &lt;- read_csv(\"data/aspatial/weather.csv\")\n\nRows: 6222 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): station\ndbl (12): year, month, day, daily_rainfall_total_mm, highest_30_min_rainfall...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nstation &lt;- read_csv(\"data/aspatial/station.csv\")\n\nRows: 63 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): Station\ndbl (2): Latitude, Longitude\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#import-geospatial-data",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#import-geospatial-data",
    "title": "Take-home Exercise 3",
    "section": "2.2 Import Geospatial Data",
    "text": "2.2 Import Geospatial Data\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\", \n                layer = \"MPSZ-2019\") %&gt;% \n  st_transform(crs = 3414)\n\nReading layer `MPSZ-2019' from data source \n  `C:\\brigittatsai\\ISSS608_AY2024-25_T2\\Take-home_Ex\\Take-home_Ex03\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#match-station-names",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#match-station-names",
    "title": "Take-home Exercise 3",
    "section": "3.3 Match Station Names",
    "text": "3.3 Match Station Names\n\nsort(unique(daily_weather$Station))\n\n [1] \"Admiralty\"               \"Admiralty (West)\"       \n [3] \"Ang Mo Kio\"              \"Boon Lay (East)\"        \n [5] \"Boon Lay (West)\"         \"Botanic Garden\"         \n [7] \"Buangkok\"                \"Bukit Panjang\"          \n [9] \"Bukit Timah\"             \"Buona Vista\"            \n[11] \"Chai Chee\"               \"Changi\"                 \n[13] \"Choa Chu Kang (Central)\" \"Choa Chu Kang (South)\"  \n[15] \"Choa Chu Kang (West)\"    \"Clementi\"               \n[17] \"Dhoby Ghaut\"             \"East Coast Parkway\"     \n[19] \"Jurong (East)\"           \"Jurong (North)\"         \n[21] \"Jurong (West)\"           \"Jurong Island\"          \n[23] \"Jurong Pier\"             \"Kampong Bahru\"          \n[25] \"Kent Ridge\"              \"Khatib\"                 \n[27] \"Kranji Reservoir\"        \"Lim Chu Kang\"           \n[29] \"Lower Peirce Reservoir\"  \"Macritchie Reservoir\"   \n[31] \"Mandai\"                  \"Marina Barrage\"         \n[33] \"Marine Parade\"           \"Newton\"                 \n[35] \"Nicoll Highway\"          \"Pasir Panjang\"          \n[37] \"Pasir Ris (Central)\"     \"Pasir Ris (West)\"       \n[39] \"Paya Lebar\"              \"Pulau Ubin\"             \n[41] \"Punggol\"                 \"Queenstown\"             \n[43] \"Seletar\"                 \"Semakau Island\"         \n[45] \"Sembawang\"               \"Sentosa Island\"         \n[47] \"Serangoon\"               \"Serangoon North\"        \n[49] \"Simei\"                   \"Somerset (Road)\"        \n[51] \"Tai Seng\"                \"Tanjong Katong\"         \n[53] \"Tanjong Pagar\"           \"Tengah\"                 \n[55] \"Toa Payoh\"               \"Tuas\"                   \n[57] \"Tuas South\"              \"Tuas West\"              \n[59] \"Ulu Pandan\"              \"Upper Peirce Reservoir\" \n[61] \"Upper Thomson\"           \"Whampoa\"                \n[63] \"Yishun\"                 \n\n\n\nsort(unique(mpsz$SUBZONE_N))\n\n  [1] \"ADMIRALTY\"                     \"AIRPORT ROAD\"                 \n  [3] \"ALEXANDRA HILL\"                \"ALEXANDRA NORTH\"              \n  [5] \"ALJUNIED\"                      \"ANAK BUKIT\"                   \n  [7] \"ANCHORVALE\"                    \"ANG MO KIO TOWN CENTRE\"       \n  [9] \"ANSON\"                         \"BAHAR\"                        \n [11] \"BALESTIER\"                     \"BANGKIT\"                      \n [13] \"BAYFRONT SUBZONE\"              \"BAYSHORE\"                     \n [15] \"BEDOK NORTH\"                   \"BEDOK RESERVOIR\"              \n [17] \"BEDOK SOUTH\"                   \"BENCOOLEN\"                    \n [19] \"BENDEMEER\"                     \"BENOI SECTOR\"                 \n [21] \"BIDADARI\"                      \"BISHAN EAST\"                  \n [23] \"BOAT QUAY\"                     \"BOON KENG\"                    \n [25] \"BOON LAY PLACE\"                \"BOON TECK\"                    \n [27] \"BOULEVARD\"                     \"BRADDELL\"                     \n [29] \"BRAS BASAH\"                    \"BRICKLAND\"                    \n [31] \"BRICKWORKS\"                    \"BUGIS\"                        \n [33] \"BUKIT BATOK CENTRAL\"           \"BUKIT BATOK EAST\"             \n [35] \"BUKIT BATOK SOUTH\"             \"BUKIT BATOK WEST\"             \n [37] \"BUKIT HO SWEE\"                 \"BUKIT MERAH\"                  \n [39] \"CAIRNHILL\"                     \"CECIL\"                        \n [41] \"CENTRAL SUBZONE\"               \"CENTRAL WATER CATCHMENT\"      \n [43] \"CHANGI AIRPORT\"                \"CHANGI BAY\"                   \n [45] \"CHANGI POINT\"                  \"CHANGI WEST\"                  \n [47] \"CHATSWORTH\"                    \"CHENG SAN\"                    \n [49] \"CHIN BEE\"                      \"CHINA SQUARE\"                 \n [51] \"CHINATOWN\"                     \"CHOA CHU KANG CENTRAL\"        \n [53] \"CHOA CHU KANG NORTH\"           \"CHONG BOON\"                   \n [55] \"CITY HALL\"                     \"CITY TERMINALS\"               \n [57] \"CLARKE QUAY\"                   \"CLEANTECH\"                    \n [59] \"CLEMENTI CENTRAL\"              \"CLEMENTI NORTH\"               \n [61] \"CLEMENTI WEST\"                 \"CLEMENTI WOODS\"               \n [63] \"CLIFFORD PIER\"                 \"COMMONWEALTH\"                 \n [65] \"COMPASSVALE\"                   \"CONEY ISLAND\"                 \n [67] \"CORONATION ROAD\"               \"CRAWFORD\"                     \n [69] \"DAIRY FARM\"                    \"DEFU INDUSTRIAL PARK\"         \n [71] \"DEPOT ROAD\"                    \"DHOBY GHAUT\"                  \n [73] \"DOVER\"                         \"DUNEARN\"                      \n [75] \"EAST COAST\"                    \"EVERTON PARK\"                 \n [77] \"FABER\"                         \"FAJAR\"                        \n [79] \"FARRER COURT\"                  \"FARRER PARK\"                  \n [81] \"FERNVALE\"                      \"FLORA DRIVE\"                  \n [83] \"FOREST HILL\"                   \"FORT CANNING\"                 \n [85] \"FRANKEL\"                       \"GALI BATU\"                    \n [87] \"GARDEN\"                        \"GEYLANG BAHRU\"                \n [89] \"GEYLANG EAST\"                  \"GHIM MOH\"                     \n [91] \"GOMBAK\"                        \"GOODWOOD PARK\"                \n [93] \"GREENWOOD PARK\"                \"GUILIN\"                       \n [95] \"GUL BASIN\"                     \"GUL CIRCLE\"                   \n [97] \"HENDERSON HILL\"                \"HILLCREST\"                    \n [99] \"HILLVIEW\"                      \"HOLLAND DRIVE\"                \n[101] \"HOLLAND ROAD\"                  \"HONG KAH\"                     \n[103] \"HONG KAH NORTH\"                \"HOUGANG CENTRAL\"              \n[105] \"HOUGANG EAST\"                  \"HOUGANG WEST\"                 \n[107] \"INSTITUTION HILL\"              \"INTERNATIONAL BUSINESS PARK\"  \n[109] \"ISTANA NEGARA\"                 \"JELEBU\"                       \n[111] \"JOO KOON\"                      \"JOO SENG\"                     \n[113] \"JURONG GATEWAY\"                \"JURONG ISLAND AND BUKOM\"      \n[115] \"JURONG PORT\"                   \"JURONG RIVER\"                 \n[117] \"JURONG WEST CENTRAL\"           \"KAKI BUKIT\"                   \n[119] \"KALLANG BAHRU\"                 \"KALLANG WAY\"                  \n[121] \"KAMPONG BUGIS\"                 \"KAMPONG GLAM\"                 \n[123] \"KAMPONG JAVA\"                  \"KAMPONG TIONG BAHRU\"          \n[125] \"KAMPONG UBI\"                   \"KANGKAR\"                      \n[127] \"KATONG\"                        \"KEAT HONG\"                    \n[129] \"KEBUN BAHRU\"                   \"KEMBANGAN\"                    \n[131] \"KENT RIDGE\"                    \"KHATIB\"                       \n[133] \"KIAN TECK\"                     \"KIM KEAT\"                     \n[135] \"KOVAN\"                         \"KRANJI\"                       \n[137] \"LAKESIDE (BUSINESS)\"           \"LAKESIDE (LEISURE)\"           \n[139] \"LAVENDER\"                      \"LEEDON PARK\"                  \n[141] \"LEONIE HILL\"                   \"LIM CHU KANG\"                 \n[143] \"LITTLE INDIA\"                  \"LIU FANG\"                     \n[145] \"LORONG 8 TOA PAYOH\"            \"LORONG AH SOO\"                \n[147] \"LORONG CHUAN\"                  \"LORONG HALUS\"                 \n[149] \"LORONG HALUS NORTH\"            \"LOWER SELETAR\"                \n[151] \"LOYANG EAST\"                   \"LOYANG WEST\"                  \n[153] \"MACKENZIE\"                     \"MACPHERSON\"                   \n[155] \"MALCOLM\"                       \"MANDAI EAST\"                  \n[157] \"MANDAI ESTATE\"                 \"MANDAI WEST\"                  \n[159] \"MARGARET DRIVE\"                \"MARINA CENTRE\"                \n[161] \"MARINA EAST\"                   \"MARINA EAST (MP)\"             \n[163] \"MARINA SOUTH\"                  \"MARINE PARADE\"                \n[165] \"MARITIME SQUARE\"               \"MARYMOUNT\"                    \n[167] \"MATILDA\"                       \"MAXWELL\"                      \n[169] \"MEI CHIN\"                      \"MIDVIEW\"                      \n[171] \"MONK'S HILL\"                   \"MOULMEIN\"                     \n[173] \"MOUNT EMILY\"                   \"MOUNT PLEASANT\"               \n[175] \"MOUNTBATTEN\"                   \"MURAI\"                        \n[177] \"NASSIM\"                        \"NATIONAL UNIVERSITY OF S'PORE\"\n[179] \"NATURE RESERVE\"                \"NEE SOON\"                     \n[181] \"NEWTON CIRCUS\"                 \"NICOLL\"                       \n[183] \"NORTH-EASTERN ISLANDS\"         \"NORTH COAST\"                  \n[185] \"NORTHLAND\"                     \"NORTHSHORE\"                   \n[187] \"ONE NORTH\"                     \"ONE TREE HILL\"                \n[189] \"ORANGE GROVE\"                  \"OXLEY\"                        \n[191] \"PANDAN\"                        \"PANG SUA\"                     \n[193] \"PARK\"                          \"PASIR PANJANG 1\"              \n[195] \"PASIR PANJANG 2\"               \"PASIR RIS CENTRAL\"            \n[197] \"PASIR RIS DRIVE\"               \"PASIR RIS PARK\"               \n[199] \"PASIR RIS WAFER FAB PARK\"      \"PASIR RIS WEST\"               \n[201] \"PATERSON\"                      \"PAYA LEBAR EAST\"              \n[203] \"PAYA LEBAR NORTH\"              \"PAYA LEBAR WEST\"              \n[205] \"PEARL'S HILL\"                  \"PEI CHUN\"                     \n[207] \"PENG SIANG\"                    \"PENJURU CRESCENT\"             \n[209] \"PEOPLE'S PARK\"                 \"PHILLIP\"                      \n[211] \"PIONEER SECTOR\"                \"PLAB\"                         \n[213] \"PLANTATION\"                    \"PORT\"                         \n[215] \"POTONG PASIR\"                  \"PULAU PUNGGOL BARAT\"          \n[217] \"PULAU PUNGGOL TIMOR\"           \"PULAU SELETAR\"                \n[219] \"PUNGGOL CANAL\"                 \"PUNGGOL FIELD\"                \n[221] \"PUNGGOL TOWN CENTRE\"           \"QUEENSWAY\"                    \n[223] \"RAFFLES PLACE\"                 \"REDHILL\"                      \n[225] \"RESERVOIR VIEW\"                \"RIDOUT\"                       \n[227] \"RIVERVALE\"                     \"ROBERTSON QUAY\"               \n[229] \"ROCHOR CANAL\"                  \"SAFTI\"                        \n[231] \"SAMULUN\"                       \"SAUJANA\"                      \n[233] \"SELEGIE\"                       \"SELETAR\"                      \n[235] \"SELETAR AEROSPACE PARK\"        \"SELETAR HILLS\"                \n[237] \"SEMAKAU\"                       \"SEMBAWANG CENTRAL\"            \n[239] \"SEMBAWANG EAST\"                \"SEMBAWANG HILLS\"              \n[241] \"SEMBAWANG NORTH\"               \"SEMBAWANG SPRINGS\"            \n[243] \"SEMBAWANG STRAITS\"             \"SENGKANG TOWN CENTRE\"         \n[245] \"SENGKANG WEST\"                 \"SENJA\"                        \n[247] \"SENNETT\"                       \"SENOKO NORTH\"                 \n[249] \"SENOKO SOUTH\"                  \"SENOKO WEST\"                  \n[251] \"SENTOSA\"                       \"SERANGOON CENTRAL\"            \n[253] \"SERANGOON GARDEN\"              \"SERANGOON NORTH\"              \n[255] \"SERANGOON NORTH IND ESTATE\"    \"SHANGRI-LA\"                   \n[257] \"SHIPYARD\"                      \"SIGLAP\"                       \n[259] \"SIMEI\"                         \"SIMPANG NORTH\"                \n[261] \"SIMPANG SOUTH\"                 \"SINGAPORE GENERAL HOSPITAL\"   \n[263] \"SINGAPORE POLYTECHNIC\"         \"SOMERSET\"                     \n[265] \"SOUTHERN GROUP\"                \"SPRINGLEAF\"                   \n[267] \"STRAITS VIEW\"                  \"SUDONG\"                       \n[269] \"SUNGEI ROAD\"                   \"SUNSET WAY\"                   \n[271] \"SWISS CLUB\"                    \"TAGORE\"                       \n[273] \"TAI SENG\"                      \"TAMAN JURONG\"                 \n[275] \"TAMPINES EAST\"                 \"TAMPINES NORTH\"               \n[277] \"TAMPINES WEST\"                 \"TANGLIN\"                      \n[279] \"TANGLIN HALT\"                  \"TANJONG IRAU\"                 \n[281] \"TANJONG PAGAR\"                 \"TANJONG RHU\"                  \n[283] \"TEBAN GARDENS\"                 \"TECK WHYE\"                    \n[285] \"TELOK BLANGAH DRIVE\"           \"TELOK BLANGAH RISE\"           \n[287] \"TELOK BLANGAH WAY\"             \"TENGAH INDUSTRIAL ESTATE\"     \n[289] \"TENGEH\"                        \"THE WHARVES\"                  \n[291] \"TIONG BAHRU\"                   \"TIONG BAHRU STATION\"          \n[293] \"TOA PAYOH CENTRAL\"             \"TOA PAYOH WEST\"               \n[295] \"TOH GUAN\"                      \"TOH TUCK\"                     \n[297] \"TOWNSVILLE\"                    \"TRAFALGAR\"                    \n[299] \"TUAS BAY\"                      \"TUAS NORTH\"                   \n[301] \"TUAS PROMENADE\"                \"TUAS VIEW\"                    \n[303] \"TUAS VIEW EXTENSION\"           \"TUKANG\"                       \n[305] \"TURF CLUB\"                     \"TYERSALL\"                     \n[307] \"ULU PANDAN\"                    \"UPPER PAYA LEBAR\"             \n[309] \"UPPER THOMSON\"                 \"VICTORIA\"                     \n[311] \"WATERWAY EAST\"                 \"WENYA\"                        \n[313] \"WEST COAST\"                    \"WOODGROVE\"                    \n[315] \"WOODLANDS EAST\"                \"WOODLANDS REGIONAL CENTRE\"    \n[317] \"WOODLANDS SOUTH\"               \"WOODLANDS WEST\"               \n[319] \"WOODLEIGH\"                     \"XILIN\"                        \n[321] \"YEW TEE\"                       \"YIO CHU KANG\"                 \n[323] \"YIO CHU KANG EAST\"             \"YIO CHU KANG NORTH\"           \n[325] \"YIO CHU KANG WEST\"             \"YISHUN CENTRAL\"               \n[327] \"YISHUN EAST\"                   \"YISHUN SOUTH\"                 \n[329] \"YISHUN WEST\"                   \"YUHUA EAST\"                   \n[331] \"YUHUA WEST\"                    \"YUNNAN\"                       \n\n\n\nmpsz &lt;- mpsz %&gt;%\n  mutate(SUBZONE_N = case_when(\n    SUBZONE_N == \"ADMIRALTY\" ~ \"Admiralty\",\n    SUBZONE_N == \"AIRPORT ROAD\" ~ \"Airport Road\",\n    SUBZONE_N == \"ALEXANDRA HILL\" ~ \"Alexandra Hill\",\n    SUBZONE_N == \"ALEXANDRA NORTH\" ~ \"Alexandra North\",\n    SUBZONE_N == \"ALJUNIED\" ~ \"Aljunied\",\n    SUBZONE_N == \"ANAK BUKIT\" ~ \"Anak Bukit\",\n    SUBZONE_N == \"ANCHORVALE\" ~ \"Anchorvale\",\n    SUBZONE_N == \"ANG MO KIO\" ~ \"Ang Mo Kio\",\n    SUBZONE_N == \"ANSON\" ~ \"Anson\",\n    SUBZONE_N == \"BAHAR\" ~ \"Bahar\",\n    SUBZONE_N == \"BALESTIER\" ~ \"Balestier\",\n    SUBZONE_N == \"BANGKIT\" ~ \"Bangkit\",\n    SUBZONE_N == \"BAYFRONT SUBZONE\" ~ \"Bayfront Subzone\",\n    SUBZONE_N == \"BAYSHORE\" ~ \"Bayshore\",\n    SUBZONE_N == \"BEDOK NORTH\" ~ \"Bedok North\",\n    SUBZONE_N == \"BEDOK RESERVOIR\" ~ \"Bedok Reservoir\",\n    SUBZONE_N == \"BEDOK SOUTH\" ~ \"Bedok South\",\n    SUBZONE_N == \"BENCOOLEN\" ~ \"Bencoolen\",\n    SUBZONE_N == \"BENDEMEER\" ~ \"Bendemeer\",\n    SUBZONE_N == \"BENOI SECTOR\" ~ \"Benoi Sector\",\n    SUBZONE_N == \"BIDADARI\" ~ \"Bidadari\",\n    SUBZONE_N == \"BISHAN EAST\" ~ \"Bishan East\",\n    SUBZONE_N == \"BOAT QUAY\" ~ \"Boat Quay\",\n    SUBZONE_N == \"BOON KENG\" ~ \"Boon Keng\",\n    SUBZONE_N == \"BOON LAY (WEST)\" ~ \"Boon Lay (West)\",\n    SUBZONE_N == \"BOON TECK\" ~ \"Boon Teck\",\n    SUBZONE_N == \"BOULEVARD\" ~ \"Boulevard\",\n    SUBZONE_N == \"BRADDELL\" ~ \"Braddell\",\n    SUBZONE_N == \"BRAS BASAH\" ~ \"Bras Basah\",\n    SUBZONE_N == \"BRICKLAND\" ~ \"Brickland\",\n    SUBZONE_N == \"BRICKWORKS\" ~ \"Brickworks\",\n    SUBZONE_N == \"BUGIS\" ~ \"Bugis\",\n    SUBZONE_N == \"BUKIT BATOK CENTRAL\" ~ \"Bukit Batok Central\",\n    SUBZONE_N == \"BUKIT BATOK EAST\" ~ \"Bukit Batok East\",\n    SUBZONE_N == \"BUKIT BATOK SOUTH\" ~ \"Bukit Batok South\",\n    SUBZONE_N == \"BUKIT BATOK WEST\" ~ \"Bukit Batok West\",\n    SUBZONE_N == \"BUKIT HO SWEE\" ~ \"Bukit Ho Swee\",\n    SUBZONE_N == \"BUKIT MERAH\" ~ \"Bukit Merah\",\n    SUBZONE_N == \"BUKIT PANJANG\" ~ \"Bukit Panjang\",\n    SUBZONE_N == \"BUKIT TIMAH\" ~ \"Bukit Timah\",\n    SUBZONE_N == \"CAIRNHILL\" ~ \"Cairnhill\",\n    SUBZONE_N == \"CECIL\" ~ \"Cecil\",\n    SUBZONE_N == \"CENTRAL SUBZONE\" ~ \"Central Subzone\",\n    SUBZONE_N == \"CENTRAL WATER CATCHMENT\" ~ \"Central Water Catchment\",\n    SUBZONE_N == \"CHAI CHEE\" ~ \"Chai Chee\",\n    SUBZONE_N == \"CHANGI\" ~ \"Changi\",\n    SUBZONE_N == \"CHANGI BAY\" ~ \"Changi Bay\",\n    SUBZONE_N == \"CHANGI POINT\" ~ \"Changi Point\",\n    SUBZONE_N == \"CHANGI WEST\" ~ \"Changi West\",\n    SUBZONE_N == \"CHATSWORTH\" ~ \"Chatsworth\",\n    SUBZONE_N == \"CHENG SAN\" ~ \"Cheng San\",\n    SUBZONE_N == \"CHIN BEE\" ~ \"Chin Bee\",\n    SUBZONE_N == \"CHINA SQUARE\" ~ \"China Square\",\n    SUBZONE_N == \"CHINATOWN\" ~ \"Chinatown\",\n    SUBZONE_N == \"CHOA CHU KANG (CENTRAL)\" ~ \"Choa Chu Kang (Central)\",\n    SUBZONE_N == \"CHOA CHU KANG (NORTH)\" ~ \"Choa Chu Kang (North)\",\n    SUBZONE_N == \"CHONG BOON\" ~ \"Chong Boon\",\n    SUBZONE_N == \"CITY HALL\" ~ \"City Hall\",\n    SUBZONE_N == \"CITY TERMINALS\" ~ \"City Terminals\",\n    SUBZONE_N == \"CLARKE QUAY\" ~ \"Clarke Quay\",\n    SUBZONE_N == \"CLEANTECH\" ~ \"Cleantech\",\n    SUBZONE_N == \"CLEMENTI\" ~ \"Clementi\",\n    SUBZONE_N == \"CLEMENTI NORTH\" ~ \"Clementi North\",\n    SUBZONE_N == \"CLEMENTI WEST\" ~ \"Clementi West\",\n    SUBZONE_N == \"CLEMENTI WOODS\" ~ \"Clementi Woods\",\n    SUBZONE_N == \"CLIFFORD PIER\" ~ \"Clifford Pier\",\n    SUBZONE_N == \"COMMONWEALTH\" ~ \"Commonwealth\",\n    SUBZONE_N == \"COMPASSVALE\" ~ \"Compassvale\",\n    SUBZONE_N == \"CONEY ISLAND\" ~ \"Coney Island\",\n    SUBZONE_N == \"CORONATION ROAD\" ~ \"Coronation Road\",\n    SUBZONE_N == \"CRAWFORD\" ~ \"Crawford\",\n    SUBZONE_N == \"DAIRY FARM\" ~ \"Dairy Farm\",\n    SUBZONE_N == \"DEFU INDUSTRIAL PARK\" ~ \"Defu Industrial Park\",\n    SUBZONE_N == \"DEPOT ROAD\" ~ \"Depot Road\",\n    SUBZONE_N == \"DHOBY GHAUT\" ~ \"Dhoby Ghaut\",\n    SUBZONE_N == \"DOVER\" ~ \"Dover\",\n    SUBZONE_N == \"DUNEARN\" ~ \"Dunearn\",\n    SUBZONE_N == \"EAST COAST PARKWAY\" ~ \"East Coast Parkway\",\n    SUBZONE_N == \"EVERTON PARK\" ~ \"Everton Park\",\n    SUBZONE_N == \"FABER\" ~ \"Faber\",\n    SUBZONE_N == \"FAJAR\" ~ \"Fajar\",\n    SUBZONE_N == \"FARRER COURT\" ~ \"Farrer Court\",\n    SUBZONE_N == \"FARRER PARK\" ~ \"Farrer Park\",\n    SUBZONE_N == \"FERNVALE\" ~ \"Fernvale\",\n    TRUE ~ SUBZONE_N  # Keep other values unchanged\n  ))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#join-dataset",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#join-dataset",
    "title": "Take-home Exercise 3",
    "section": "3.2 Join Dataset",
    "text": "3.2 Join Dataset\n\nweather_map &lt;- left_join(mpsz, weather,\n                         by = c(\"SUBZONE_N\" = \"station\"),\n                         relationship = \"many-to-many\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#remove-unnecessary-columns",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#remove-unnecessary-columns",
    "title": "Take-home Exercise 3",
    "section": "3.3 Remove Unnecessary Columns",
    "text": "3.3 Remove Unnecessary Columns\n\nweather_map &lt;- subset(weather_map, select = -c(OBJECTID, SUBZONE_NO, SUBZONE_C,\n                                       PLN_AREA_C, REGION_C, FMEL_UPD_D, \n                                       CA_IND, INC_CRC))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#rename-columns",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#rename-columns",
    "title": "Take-home Exercise 3",
    "section": "3.4 Rename Columns",
    "text": "3.4 Rename Columns\n\nweather &lt;- weather %&gt;%\n  rename(Station = station,\n         Year = year,\n         Month = month,\n         Day = day,\n         rainfall_total = daily_rainfall_total_mm,\n         rainfall_30 = highest_30_min_rainfall_mm,\n         rainfall_60 = highest_60_min_rainfall_mm,\n         rainfall_120 = highest_120_min_rainfall_mm,\n         mean_temp = mean_temperature_c,\n         max_temp = maximum_temperature_c,\n         min_temp = minimum_temperature_c,\n         mean_wind = mean_wind_speed_km_h,\n         max_wind = max_wind_speed_km_h)\n\n\ndaily_weather &lt;- daily_weather %&gt;%\n  rename(Year = year,\n         Month = month,\n         Day = day,\n         rainfall_total = daily_rainfall_total_mm,\n         rainfall_30 = highest_30_min_rainfall_mm,\n         rainfall_60 = highest_60_min_rainfall_mm,\n         rainfall_120 = highest_120_min_rainfall_mm,\n         mean_temp = mean_temperature_c,\n         max_temp = maximum_temperature_c,\n         min_temp = minimum_temperature_c,\n         mean_wind = mean_wind_speed_km_h,\n         max_wind = max_wind_speed_km_h)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#remove-missing-records",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#remove-missing-records",
    "title": "Take-home Exercise 3",
    "section": "3.5 Remove Missing Records",
    "text": "3.5 Remove Missing Records\nDefine list of stations:\n\nstations &lt;- c(\"Admiralty\", \"Ang Mo Kio\", \"Changi\", \"Choa Chu Kang (South)\",\n              \"Clementi\", \"East Coast Parkway\", \"Jurong (West)\",\n              \"Jurong Island\", \"Newton\", \"Pasir Panjang\", \"Paya Lebar\",\n              \"Pulau Ubin\", \"Seletar\", \"Sembawang\", \"Sentosa Island\",\n              \"Tai Seng\", \"Tuas South\")\n\n\nweather &lt;- weather %&gt;% \n  filter(!(Station %in% stations & (is.na(rainfall_total) | is.na(rainfall_30) | \n                                    is.na(rainfall_60) | is.na(rainfall_120) | \n                                    is.na(mean_temp) | is.na(max_temp) | \n                                    is.na(min_temp) | is.na(mean_wind) | \n                                    is.na(max_wind))))\n\n\ndaily_weather &lt;- daily_weather %&gt;% \n  filter(!(Station %in% stations & (is.na(rainfall_total) | is.na(rainfall_30) | \n                                    is.na(rainfall_60) | is.na(rainfall_120) | \n                                    is.na(mean_temp) | is.na(max_temp) | \n                                    is.na(min_temp) | is.na(mean_wind) | \n                                    is.na(max_wind))))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#handling-date-data",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#handling-date-data",
    "title": "Take-home Exercise 3",
    "section": "3.6 Handling Date Data",
    "text": "3.6 Handling Date Data\n\nweather &lt;- weather %&gt;%\n  mutate(\n    yearmonth = make_date(Year, Month, 1)\n  )\n\n\ndaily_weather &lt;- daily_weather %&gt;%\n  mutate(\n    yearmonth = make_date(Year, Month, 1)\n  )"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#derive-parameters",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#derive-parameters",
    "title": "Take-home Exercise 3",
    "section": "3.9 Derive Parameters",
    "text": "3.9 Derive Parameters\nIn the analysis, we aim to provide several aggregations to see the monthly weather conditions in the form of geospatial map. The following are the variables that we aim to show in the chart:\nWeather Parameter:\n\nRainfall\nWind Speed\nTemperature\n\nMeasurement Options:\n\nMean\nMaximum\nFrequency\n\nTime Period:\n\nMonthly\n\n\n3.9.1 Rainfall Parameters\nTo define the frequency of rainfall, we will use “Heavy Rain” as the baseline to define the frequency of rainfall in a defined period of time (weekly/monthly/quarterly). Any daily rainfall recorded that is above or equal to 31 mm/day is considered as heavy rain.\n\n\nRainfall Parameters\n\n\n\n\nRain Type\nTotal Daily Rainfall (mm)\n\n\n\n\nNo Rain\n0\n\n\nVery Light Rain\n0.1 - 0.9\n\n\nLight Rain\n1.0 - 10\n\n\nModerate Rain\n11 - 30\n\n\nHeavy Rain\n31 - 70\n\n\nVery Heavy Rain\n71 - 150\n\n\nExtremely Heavy Rain\n&gt; 151\n\n\n\n\n\nsource: https://www.nchm.gov.bt/attachment/ckfinder/userfiles/files/Rainfall%20intensity%20classification.pdf\n\n# Flag heavy rains in the daily_weather dataframe\ndaily_weather &lt;- daily_weather %&gt;%\n  mutate(heavy_rain_count = if_else(rainfall_total &gt; 31, 1, 0))\n\n\n# Aggregate the total monthly frequency\nfrequency_heavy_rain &lt;- daily_weather %&gt;%\n  group_by(Station, yearmonth) %&gt;%\n  summarise(frequency_heavy_rain = sum(heavy_rain_count), .groups = \"drop\")\n\n\n# 1. Drop the geometry column (only for non-spatial join)\nmonthly_rainfall_no_geom &lt;- st_drop_geometry(monthly_rainfall)\n\n# 2. Perform the left join on the data (without geometry)\nmonthly_rainfall_no_geom &lt;- left_join(monthly_rainfall_no_geom, frequency_heavy_rain,\n                                     by = c(\"Station\" = \"Station\", \n                                            \"yearmonth\" = \"yearmonth\"))\n\n# 3. Add the geometry column back to the joined dataframe\nmonthly_rainfall &lt;- st_sf(monthly_rainfall_no_geom,\n                          geometry = st_geometry(monthly_rainfall))\n\n\nmonthly_rainfall &lt;- monthly_rainfall %&gt;%\n  mutate(month = format(ymd(yearmonth), \"%B\"))\n\n\n3.9.2 Temperature Parameter\n\n\nTemperature Parameters\n\n\n\n\nHeat Stress\nTemperature (°C)\n\n\n\n\nLow Heat Stress\n&lt; 31\n\n\nModerate Heat Stress\n31 ≤ °C &lt; 33\n\n\nHigh Heat Stress\n≥ 33\n\n\n\n\n\nsource: https://www.weather.gov.sg/heat-stress/\n\nrange(daily_weather$max_temp, na.rm=TRUE)\n\n[1] 25.5 36.4\n\n\n\ndaily_weather &lt;- daily_weather %&gt;%\n  mutate(high_heat_count = if_else(max_temp &gt;= 33, 1, 0))\n\n\nfrequency_high_heat &lt;- daily_weather %&gt;%\n  group_by(Station, yearmonth) %&gt;%\n  summarise(frequency_high_heat = sum(high_heat_count), .groups = \"drop\")\n\n\n# 1. Drop the geometry column (only for non-spatial join)\nmonthly_temp_no_geom &lt;- st_drop_geometry(monthly_temp)\n\n# 2. Perform the left join on the data (without geometry)\nmonthly_temp_no_geom &lt;- left_join(monthly_temp_no_geom, frequency_high_heat,\n                                     by = c(\"Station\" = \"Station\", \n                                            \"yearmonth\" = \"yearmonth\"))\n\n# 3. Add the geometry column back to the joined dataframe\nmonthly_temp &lt;- st_sf(monthly_temp_no_geom,\n                          geometry = st_geometry(monthly_temp))\n\n\nmonthly_temp &lt;- monthly_temp %&gt;%\n  mutate(month = format(ymd(yearmonth), \"%B\"))\n\n\n3.9.3 Wind Speed Parameter\nThe parameter for wind speed is based on Beaufort Wind Scale. To define strong wind force, we will use wind force 7 to determine frequency of strong winds in Singapore.\n\n\nWind Speed Parameters\n\n\n\n\nWind Force\nDescription\nSpeed (km/h)\n\n\n\n\n0\nCalm\n&lt; 1\n\n\n1\nLight Air\n1 - 5\n\n\n2\nLight Breeze\n6 - 11\n\n\n3\nGentle Breeze\n12 - 19\n\n\n4\nModerate Breeze\n20 - 28\n\n\n5\nFresh Breeze\n29 - 38\n\n\n6\nStrong Breeze\n38 - 49\n\n\n7\nNear Gale\n50 - 61\n\n\n8\nGale\n62 - 74\n\n\n9\nStrong Gale\n75 - 88\n\n\n10\nStorm\n89 - 102\n\n\n11\nViolent Storm\n103 - 117\n\n\n12\nHurricane\n≥ 118\n\n\n\n\n\nsource: https://www.rmets.org/metmatters/beaufort-wind-scale\n\nrange(daily_weather$max_wind, na.rm=TRUE)\n\n[1]  13.0 105.4\n\n\n\ndaily_weather &lt;- daily_weather %&gt;%\n  mutate(strong_wind_count = if_else(max_wind &gt;= 50, 1, 0))\n\n\nfrequency_strong_wind &lt;- daily_weather %&gt;%\n  group_by(Station, yearmonth) %&gt;%\n  summarise(frequency_strong_wind = sum(strong_wind_count), .groups = \"drop\")\n\n\n# 1. Drop the geometry column (only for non-spatial join)\nmonthly_wind_no_geom &lt;- st_drop_geometry(monthly_wind)\n\n# 2. Perform the left join on the data (without geometry)\nmonthly_wind_no_geom &lt;- left_join(monthly_wind_no_geom, frequency_strong_wind,\n                                     by = c(\"Station\" = \"Station\", \n                                            \"yearmonth\" = \"yearmonth\"))\n\n# 3. Add the geometry column back to the joined dataframe\nmonthly_wind &lt;- st_sf(monthly_wind_no_geom,\n                          geometry = st_geometry(monthly_wind))\n\n\nmonthly_wind &lt;- monthly_wind %&gt;%\n  mutate(month = format(ymd(yearmonth), \"%B\"))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#frequency-of-strong-rainfall",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#frequency-of-strong-rainfall",
    "title": "Take-home Exercise 3",
    "section": "5.1 Frequency of Strong Rainfall",
    "text": "5.1 Frequency of Strong Rainfall\n\nesri_basemap &lt;- read_osm(weather_map, type = \"esri\", raster = TRUE)\n\n\njan_rainfall &lt;- jan_rainfall %&gt;%\n  mutate(\n    rain_icon = case_when(\n      max_rainfall &gt;= 50  & max_rainfall &lt; 60  ~ \"data/aspatial/lightrain.png\",\n      max_rainfall &gt;= 60  & max_rainfall &lt; 70  ~ \"data/aspatial/lightrain2.png\",\n      max_rainfall &gt;= 70  & max_rainfall &lt; 80  ~ \"data/aspatial/lightrain3.png\",\n      max_rainfall &gt;= 80  & max_rainfall &lt; 90  ~ \"data/aspatial/lightrain4.png\",\n      max_rainfall &gt;= 90  & max_rainfall &lt; 100 ~ \"data/aspatial/lightrain5.png\",\n      max_rainfall &gt;= 100 & max_rainfall &lt; 110 ~ \"data/aspatial/heavyrain.png\",\n      max_rainfall &gt;= 110 & max_rainfall &lt; 120 ~ \"data/aspatial/heavyrain2.png\",\n      TRUE                                     ~ \"data/aspatial/rain_missing.png\"\n    )\n  )\n\n\ntmap_mode(\"plot\")  # Make sure to use plot mode for static plots\n\nℹ tmap mode set to \"plot\".\n\n# Filter to include only stations with rainfall records\njan_rainfall_with_data &lt;- jan_rainfall %&gt;%\n  filter(!is.na(max_rainfall))\n\ntm_shape(jan_rainfall) +\n  tm_fill(\"max_rainfall\", \n          style = \"quantile\",  # Quantile bins for better distribution\n          palette = \"-Blues\",  # Reverse blue palette (darker blue for heavier rainfall)\n          title = \"Maximum Rainfall\", \n          border.col = \"white\"  # Make borders white for clarity\n          ) +\n  tm_layout(\n    main.title = \"January Max Rainfall (mm)\",  # Set main title\n    main.title.position = \"center\",  # Position the title at the center\n    main.title.size = 1.2,  # Adjust title size\n    legend.position = c(\"LEFT\", \"BOTTOM\"),  # Position the legend\n    legend.title.size = 1.2,  # Title size for the legend\n    legend.text.size = 0.8,  # Text size for the legend\n    legend.height = 0.45, \n    legend.width = 0.35,\n    frame = TRUE  # Add frame around the map\n  ) +\n  tm_borders(alpha = 0.5) +  # Add borders with some transparency\n  tm_compass(type = \"8star\", size = 2) +  # Add compass with 8-star style\n  tm_scale_bar() +  # Add scale bar\n  tm_grid(alpha = 0.2) +  # Add grid with some transparency\n  tm_basemap(\"CartoDB.Positron\")  # Lighter basemap\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────\n[v3-&gt;v4] `tm_fill()`: instead of `style = \"quantile\"`, use fill.scale =\n`tm_scale_intervals()`.\nℹ Migrate the argument(s) 'style', 'palette' (rename to 'values') to\n  'tm_scale_intervals(&lt;HERE&gt;)'[v3-&gt;v4] `tm_fill()`: migrate the argument(s) related to the legend of the\nvisual variable `fill` namely 'title' to 'fill.legend = tm_legend(&lt;HERE&gt;)'[v3-&gt;v4] `tm_layout()`: use `tm_title()` instead of `tm_layout(main.title = )`[v3-&gt;v4] `tm_borders()`: use 'fill' for the fill color of polygons/symbols\n(instead of 'col'), and 'col' for the outlines (instead of 'border.col').[v3-&gt;v4] `tm_borders()`: use `fill_alpha` instead of `alpha`.! `tm_scale_bar()` is deprecated. Please use `tm_scalebar()` instead.Multiple palettes called \"blues\" found: \"brewer.blues\", \"matplotlib.blues\". The first one, \"brewer.blues\", is returned.\n[cols4all] color palettes: use palettes from the R package cols4all. Run\n`cols4all::c4a_gui()` to explore them. The old palette name \"-Blues\" is named\n\"blues\" (in long format \"brewer.blues\")\n\n\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n \ntm_shape(weather_map) +\n  tm_borders() +\n  tm_basemap(\"Stamen.Toner\")  +\n  tm_polygons(col = \"lightgray\", border.col = \"lightgray\", alpha = 0.1) +\n  tm_shape(jan_rainfall) +\n  tm_symbols(\n    col = \"max_rainfall\", \n    palette = \"Blues\",\n    title.col = \"Max Rainfall (mm)\",\n    popup.vars = c(\"Station\", \"max_rainfall\"),\n    legend.size.show = FALSE \n  ) +\n  tm_text(\"Station\", size=0.8, col=\"black\", auto.placement=TRUE,\n          ymod=1.2) +\n  tm_layout(title = \"January Max Rainfall (mm)\", legend.outside = TRUE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html",
    "title": "Hands-on Exercise 8",
    "section": "",
    "text": "pacman::p_load(sf, tmap, tidyverse)\n\n\n\n\n\n\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\brigittatsai\\ISSS608_AY2024-25_T2\\Hands-on_Ex\\Hands-on_Ex08\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nContent overview\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\n\n\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\n\n\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup()%&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %&gt;%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%&gt;%\nmutate(`AGED`=rowSums(.[16:21])) %&gt;%\nmutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = list(toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\n\nwrite_rds(mpsz_pop2020, \"data/mpszpop2020.rds\")\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nEach method gives different dependency classifications due to different interpretation of groupings and data distribution from each method. Fixed method requires break points in order to be plotted.\n\n\n\n\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7866  0.8585  0.8763 19.0000      92 \n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\nWarning: Values have found that are higher than the highest break\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nReversing colour shading\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\ntmap style set to \"classic\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\" \n\n\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.legend = tm_legend(\n                title = \"Dependency ratio\")) +\n  tm_layout(title = \"Distribution of Dependency Ratio by planning subzone\",\n            frame = TRUE) +\n  tm_borders() +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\n\n\n\n\nIn the original code chunk, tm_scale_intervals() and tm_title() does not exist as a function.\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\nyoungmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#install-packages",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#install-packages",
    "title": "Hands-on Exercise 8",
    "section": "",
    "text": "pacman::p_load(sf, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#import-data",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#import-data",
    "title": "Hands-on Exercise 8",
    "section": "",
    "text": "mpsz &lt;- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\brigittatsai\\ISSS608_AY2024-25_T2\\Hands-on_Ex\\Hands-on_Ex08\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nContent overview\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\n\n\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#data-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#data-preparation",
    "title": "Hands-on Exercise 8",
    "section": "",
    "text": "popdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup()%&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %&gt;%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%&gt;%\nmutate(`AGED`=rowSums(.[16:21])) %&gt;%\nmutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = list(toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\n\nwrite_rds(mpsz_pop2020, \"data/mpszpop2020.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#plotting-a-choropleth-map",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#plotting-a-choropleth-map",
    "title": "Hands-on Exercise 8",
    "section": "",
    "text": "tmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nEach method gives different dependency classifications due to different interpretation of groupings and data distribution from each method. Fixed method requires break points in order to be plotted.\n\n\n\n\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7866  0.8585  0.8763 19.0000      92 \n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\nWarning: Values have found that are higher than the highest break\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nReversing colour shading\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\ntmap style set to \"classic\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\" \n\n\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.legend = tm_legend(\n                title = \"Dependency ratio\")) +\n  tm_layout(title = \"Distribution of Dependency Ratio by planning subzone\",\n            frame = TRUE) +\n  tm_borders() +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\n\n\n\n\nIn the original code chunk, tm_scale_intervals() and tm_title() does not exist as a function."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#drawing-small-multiple-choropleth-maps",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#drawing-small-multiple-choropleth-maps",
    "title": "Hands-on Exercise 8",
    "section": "",
    "text": "tm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\nyoungmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#mapping-spatial-object-meeting-a-selection-criterion",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#mapping-spatial-object-meeting-a-selection-criterion",
    "title": "Hands-on Exercise 8",
    "section": "",
    "text": "tm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#import-data-1",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#import-data-1",
    "title": "Hands-on Exercise 8",
    "section": "1 Import Data",
    "text": "1 Import Data\n\nsgpools &lt;- read_csv(\"data/aspatial/SGPools_svy21.csv\")\n\nRows: 306 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): NAME, ADDRESS, OUTLET TYPE\ndbl (4): POSTCODE, XCOORD, YCOORD, Gp1Gp2 Winnings\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nlist(sgpools) \n\n[[1]]\n# A tibble: 306 × 7\n   NAME           ADDRESS POSTCODE XCOORD YCOORD `OUTLET TYPE` `Gp1Gp2 Winnings`\n   &lt;chr&gt;          &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;                     &lt;dbl&gt;\n 1 Livewire (Mar… 2 Bayf…    18972 30842. 29599. Branch                        5\n 2 Livewire (Res… 26 Sen…    98138 26704. 26526. Branch                       11\n 3 SportsBuzz (K… Lotus …   738078 20118. 44888. Branch                        0\n 4 SportsBuzz (P… 1 Sele…   188306 29777. 31382. Branch                       44\n 5 Prime Serango… Blk 54…   552542 32239. 39519. Branch                        0\n 6 Singapore Poo… 1A Woo…   731001 21012. 46987. Branch                        3\n 7 Singapore Poo… Blk 64…   370064 33990. 34356. Branch                       17\n 8 Singapore Poo… Blk 88…   370088 33847. 33976. Branch                       16\n 9 Singapore Poo… Blk 30…   540308 33910. 41275. Branch                       21\n10 Singapore Poo… Blk 20…   560202 29246. 38943. Branch                       25\n# ℹ 296 more rows"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#creating-sf-dataframe-from-aspatial-dataframe",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#creating-sf-dataframe-from-aspatial-dataframe",
    "title": "Hands-on Exercise 8",
    "section": "2 Creating sf dataframe from aspatial dataframe",
    "text": "2 Creating sf dataframe from aspatial dataframe\n\nsgpools_sf &lt;- st_as_sf(sgpools, \n                       coords = c(\"XCOORD\", \"YCOORD\"),\n                       crs= 3414)\n\n\nlist(sgpools_sf)\n\n[[1]]\nSimple feature collection with 306 features and 5 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 7844.194 ymin: 26525.7 xmax: 45176.57 ymax: 47987.13\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 306 × 6\n   NAME                         ADDRESS POSTCODE `OUTLET TYPE` `Gp1Gp2 Winnings`\n * &lt;chr&gt;                        &lt;chr&gt;      &lt;dbl&gt; &lt;chr&gt;                     &lt;dbl&gt;\n 1 Livewire (Marina Bay Sands)  2 Bayf…    18972 Branch                        5\n 2 Livewire (Resorts World Sen… 26 Sen…    98138 Branch                       11\n 3 SportsBuzz (Kranji)          Lotus …   738078 Branch                        0\n 4 SportsBuzz (PoMo)            1 Sele…   188306 Branch                       44\n 5 Prime Serangoon North        Blk 54…   552542 Branch                        0\n 6 Singapore Pools Woodlands C… 1A Woo…   731001 Branch                        3\n 7 Singapore Pools 64 Circuit … Blk 64…   370064 Branch                       17\n 8 Singapore Pools 88 Circuit … Blk 88…   370088 Branch                       16\n 9 Singapore Pools Anchorvale … Blk 30…   540308 Branch                       21\n10 Singapore Pools Ang Mo Kio … Blk 20…   560202 Branch                       25\n# ℹ 296 more rows\n# ℹ 1 more variable: geometry &lt;POINT [m]&gt;"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#drawing-proportional-symbol-map",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#drawing-proportional-symbol-map",
    "title": "Hands-on Exercise 8",
    "section": "3 Drawing Proportional Symbol Map",
    "text": "3 Drawing Proportional Symbol Map\n\ntmap_mode(\"view\") # Interactive mode\n\ntmap mode set to interactive viewing\n\n\n\n3.1 Interactive Point Symbol Map\n\ntm_shape(sgpools_sf) +\ntm_bubbles(col = \"red\",\n           size = 1,\n           border.col = \"black\",\n           border.lwd = 1)\n\n\n\n\n\n\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"red\",\n           size = \"Gp1Gp2 Winnings\",\n           border.col = \"black\",\n           border.lwd = 1)\n\nLegend for symbol sizes not available in view mode.\n\n\n\n\n\n\n\n\n3.2 Assigning different colors\n\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"OUTLET TYPE\", \n          size = \"Gp1Gp2 Winnings\",\n          border.col = \"black\",\n          border.lwd = 1)\n\nLegend for symbol sizes not available in view mode.\n\n\n\n\n\n\n\ntm_shape(sgpools_sf) +\n  tm_bubbles(col = \"OUTLET TYPE\", \n          size = \"Gp1Gp2 Winnings\",\n          border.col = \"black\",\n          border.lwd = 1) +\n  tm_facets(by= \"OUTLET TYPE\",\n            nrow = 1,\n            sync = TRUE)\n\nLegend for symbol sizes not available in view mode.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#import-data-2",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#import-data-2",
    "title": "Hands-on Exercise 8",
    "section": "1 Import Data",
    "text": "1 Import Data\n\nNGA_wp &lt;- read_rds(\"data/rds/NGA_wp.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#basic-choropleth-mapping",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#basic-choropleth-mapping",
    "title": "Hands-on Exercise 8",
    "section": "2 Basic Choropleth Mapping",
    "text": "2 Basic Choropleth Mapping\n\np1 &lt;- tm_shape(NGA_wp) +\n  tm_fill(\"wp_functional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Distribution of functional water point by LGAs\",\n            main.title.size = 0.8,\n            legend.outside = FALSE,\n            legend.text.size = 0.6,\n            legend.title.size = 0.6)\n\np2 &lt;- tm_shape(NGA_wp) +\n  tm_fill(\"total_wp\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Distribution of total  water point by LGAs\",\n            main.title.size = 0.8,\n            legend.outside = FALSE,\n            legend.text.size = 0.6,\n            legend.title.size = 0.6)\n\ntmap_arrange(p2, p1, nrow = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#choropleth-map-for-rates",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#choropleth-map-for-rates",
    "title": "Hands-on Exercise 8",
    "section": "3 Choropleth Map for Rates",
    "text": "3 Choropleth Map for Rates\n\n3.1 Deriving Proportion of Functional Water Points and Non-Functional Water Points\n\nNGA_wp &lt;- NGA_wp %&gt;%\n  mutate(pct_functional = wp_functional/total_wp) %&gt;%\n  mutate(pct_nonfunctional = wp_nonfunctional/total_wp)\n\n\n\n3.2 Plotting Map of Rate\n\ntm_shape(NGA_wp) +\n  tm_fill(\"pct_functional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\",\n          legend.hist = TRUE) +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Rate map of functional water point by LGAs\",\n            legend.outside = TRUE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#extreme-value-maps",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#extreme-value-maps",
    "title": "Hands-on Exercise 8",
    "section": "4 Extreme Value Maps",
    "text": "4 Extreme Value Maps\n\n4.1 Percentile Map\nStep 1: Exclude null values\n\nNGA_wp &lt;- NGA_wp %&gt;%\n  drop_na()\n\nStep 2: Create customised classification and extract values\n\npercent &lt;- c(0,.01,.1,.5,.9,.99,1)\nvar &lt;- NGA_wp[\"pct_functional\"] %&gt;%\n  st_set_geometry(NULL)\nquantile(var[,1], percent)\n\n       0%        1%       10%       50%       90%       99%      100% \n0.0000000 0.0000000 0.2169811 0.4791667 0.8611111 1.0000000 1.0000000 \n\n\nStep 3: Create get.var function\n\nget.var &lt;- function(vname,df) {\n  v &lt;- df[vname] %&gt;% \n    st_set_geometry(NULL)\n  v &lt;- unname(v[,1])\n  return(v)\n}\n\nStep 4: A percentile mapping function\n\npercentmap &lt;- function(vnam, df, legtitle=NA, mtitle=\"Percentile Map\"){\n  percent &lt;- c(0,.01,.1,.5,.9,.99,1)\n  var &lt;- get.var(vnam, df)\n  bperc &lt;- quantile(var, percent)\n  tm_shape(df) +\n  tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,\n             title=legtitle,\n             breaks=bperc,\n             palette=\"Blues\",\n          labels=c(\"&lt; 1%\", \"1% - 10%\", \"10% - 50%\", \"50% - 90%\", \"90% - 99%\", \"&gt; 99%\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"right\",\"bottom\"))\n}\n\n\npercentmap(\"total_wp\", NGA_wp)\n\n\n\n\n\n\n\n\n\n\n4.2 Box Map\n\nggplot(data = NGA_wp,\n       aes(x = \"\",\n           y = wp_nonfunctional)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n4.2.1 Creating the boxbreaks function\n\nboxbreaks &lt;- function(v,mult=1.5) {\n  qv &lt;- unname(quantile(v))\n  iqr &lt;- qv[4] - qv[2]\n  upfence &lt;- qv[4] + mult * iqr\n  lofence &lt;- qv[2] - mult * iqr\n  # initialize break points vector\n  bb &lt;- vector(mode=\"numeric\",length=7)\n  # logic for lower and upper fences\n  if (lofence &lt; qv[1]) {  # no lower outliers\n    bb[1] &lt;- lofence\n    bb[2] &lt;- floor(qv[1])\n  } else {\n    bb[2] &lt;- lofence\n    bb[1] &lt;- qv[1]\n  }\n  if (upfence &gt; qv[5]) { # no upper outliers\n    bb[7] &lt;- upfence\n    bb[6] &lt;- ceiling(qv[5])\n  } else {\n    bb[6] &lt;- upfence\n    bb[7] &lt;- qv[5]\n  }\n  bb[3:5] &lt;- qv[2:4]\n  return(bb)\n}\n\n\n\n4.2.2 Creating the get.var function\n\nget.var &lt;- function(vname,df) {\n  v &lt;- df[vname] %&gt;% st_set_geometry(NULL)\n  v &lt;- unname(v[,1])\n  return(v)\n}\n\n\nvar &lt;- get.var(\"wp_nonfunctional\", NGA_wp) \nboxbreaks(var)\n\n[1] -56.5   0.0  14.0  34.0  61.0 131.5 278.0\n\n\n\n\n\n4.2.3 Boxmap function\n\nboxmap &lt;- function(vnam, df, \n                   legtitle=NA,\n                   mtitle=\"Box Map\",\n                   mult=1.5){\n  var &lt;- get.var(vnam,df)\n  bb &lt;- boxbreaks(var)\n  tm_shape(df) +\n    tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,title=legtitle,\n             breaks=bb,\n             palette=\"Blues\",\n          labels = c(\"lower outlier\", \n                     \"&lt; 25%\", \n                     \"25% - 50%\", \n                     \"50% - 75%\",\n                     \"&gt; 75%\", \n                     \"upper outlier\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"left\",\n                               \"top\"))\n}\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nboxmap(\"wp_nonfunctional\", NGA_wp)\n\nWarning: Breaks contains positive and negative values. Better is to use\ndiverging scale instead, or set auto.palette.mapping to FALSE."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#combine-geometry",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#combine-geometry",
    "title": "Take-home Exercise 3",
    "section": "3.8 Combine Geometry",
    "text": "3.8 Combine Geometry\n\nweather_map &lt;- weather_map %&gt;%\n  group_by(Station) %&gt;%\n  mutate(geometry = st_union(geometry)) %&gt;%\n  mutate(geometry = st_cast(geometry, \"MULTIPOLYGON\")) %&gt;%\n  ungroup()\n\n\n# Create a dataset with all combinations of yearmonth and Station (to keep all stations)\nall_combinations &lt;- weather_map %&gt;%\n  st_drop_geometry() %&gt;% # Drop geometry temporarily\n  distinct(yearmonth, Station) \n\n# Merge the combinations back to weather_map to fill in missing rainfall data\nmonthly_rainfall &lt;- weather_map %&gt;%\n  group_by(yearmonth, Station, geometry) %&gt;%\n  summarize(\n    max_rainfall = if (all(is.na(rainfall_total))) NA_real_ else max(rainfall_total, na.rm = TRUE),\n    mean_rainfall = if (all(is.na(rainfall_total))) NA_real_ else mean(rainfall_total, na.rm = TRUE),\n    .groups = \"drop\"\n  ) %&gt;%\n  right_join(all_combinations, by = c(\"yearmonth\", \"Station\")) %&gt;%\n  arrange(yearmonth, Station)\n\n\nmonths_2024 &lt;- seq(ymd(\"2024-01-01\"), ymd(\"2024-12-01\"), by = \"month\")\n\n# Separate rows with missing yearmonth\nstations_missing_yearmonth &lt;- monthly_rainfall %&gt;%\n  filter(is.na(yearmonth)) %&gt;%\n  # Duplicate rows for each month\n  mutate(yearmonth = list(months_2024)) %&gt;%\n  unnest(yearmonth)\n\nmonthly_rainfall &lt;- monthly_rainfall %&gt;%\n  filter(!is.na(yearmonth)) %&gt;%\n  bind_rows(stations_missing_yearmonth) %&gt;%\n  arrange(Station, yearmonth)\n\nFilter to January\n\njan_rainfall &lt;- monthly_rainfall %&gt;% \n  filter(yearmonth == \"2024-01-01\")\n\n\njan_rainfall_with_data &lt;- jan_rainfall %&gt;%\n  filter(!is.na(max_rainfall))\n\n\ntmap_mode(\"plot\")\n\nℹ tmap mode set to \"plot\".\n\ntm_shape(jan_rainfall) +\n  tm_layout(\n    main.title = \"January Max Rainfall (mm)\",\n    main.title.position = \"center\",\n    main.title.size = 1.2,\n    legend.position = c(\"RIGHT\", \"BOTTOM\"),\n    legend.title.size = 0.8,\n    legend.text.size = 0.8,\n    legend.outside = TRUE,\n    legend.outside.position = \"bottom\",\n    legend.frame = FALSE,\n    frame = TRUE\n  ) +\n  tm_shape(jan_rainfall_with_data) +\n  tm_symbols(\n    col = \"max_rainfall\", \n    palette = \"Blues\",\n    title.col = \"Max Rainfall (mm)\",\n    popup.vars = c(\"Station\", \"max_rainfall\"),\n    legend.size.show = FALSE\n  ) +\n  tm_shape(jan_rainfall_with_data) +\n  tm_text(\"Station\", size = 0.7, col = \"black\", shadow = FALSE, ymod=-1) +\n  tm_grid(alpha = 0.2) +\n  tm_basemap(\"CartoDB.Positron\")\n\n[v3-&gt;v4] `tm_layout()`: use `tm_title()` instead of `tm_layout(main.title = )`\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────\n\n[v3-&gt;v4] `tm_symbols()`: migrate the argument(s) related to the scale of the\nvisual variable `fill` namely 'palette' (rename to 'values') to fill.scale =\ntm_scale(&lt;HERE&gt;).\n[v3-&gt;v4] `symbols()`: use 'fill' for the fill color of polygons/symbols\n(instead of 'col'), and 'col' for the outlines (instead of 'border.col').\n[v3-&gt;v4] `symbols()`: migrate the argument(s) related to the legend of the\nvisual variable `fill` namely 'title.col' (rename to 'title') to 'fill.legend =\ntm_legend(&lt;HERE&gt;)'\n[v3-&gt;v4] `symbols()`: use `size.legend = tm_legend_hide()` instead of\n`legend.size.show = FALSE`.\n[v3-&gt;v4] `tm_text()`: migrate the layer options 'shadow' to 'options =\nopt_tm_text(&lt;HERE&gt;)'\n[cols4all] color palettes: use palettes from the R package cols4all. Run\n`cols4all::c4a_gui()` to explore them. The old palette name \"Blues\" is named\n\"brewer.blues\"\nMultiple palettes called \"blues\" found: \"brewer.blues\", \"matplotlib.blues\". The first one, \"brewer.blues\", is returned."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-background",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-background",
    "title": "Take-home Exercise 1",
    "section": "1.1 The Background",
    "text": "1.1 The Background\nThe maritime industry plays a crucial role in supporting the global trade ecosystem, which serves as the primary mode for goods transportation. As it supports the international trading market, it is very important to pay more attention to the operational efficiency of the maritime industry. The purpose of this paper is to present the findings from shipping voyage data."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-data",
    "title": "Take-home Exercise 1",
    "section": "1.2 The Data",
    "text": "1.2 The Data\nThe following are the details of the data source for this analysis:\n\nData Source: Ship Performance Clustering Dataset\nDataset Size: 18 columns x 2,736 rows\nData format: csv file"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-task",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-task",
    "title": "Take-home Exercise 1",
    "section": "1.3 The Task",
    "text": "1.3 The Task\nAs the graphical editor of the media company, an article about ship performance in the Gulf of Guinea will be written and published. Hence, this paper will include the following contents:\n\nExploratory Data Analysis of ship performance based on different underlying factors\nVisualization of key operational metrics of the ship for future performance optimizations in the maritime industry"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#load-and-install-packages",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#load-and-install-packages",
    "title": "Take-home Exercise 1",
    "section": "2.1 Load and Install Packages",
    "text": "2.1 Load and Install Packages\nFor this analysis, tidyverse and ggplot2 family packages will be used.\n\npacman::p_load(tidyverse, ggrepel, patchwork, ggthemes, hrbrthemes, ggiraph,\n               plotly, DT, readxl, gifski, gapminder, gganimate, ggdist, ggridges,\n               colorspace, ggstatsplot, crosstalk, FunnelPlotR, knitr, scales,\n               corrplot)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#import-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#import-data",
    "title": "Take-home Exercise 1",
    "section": "2.2 Import Data",
    "text": "2.2 Import Data\nImport ship performance dataset to get started with the analysis.\n\nship &lt;- read_csv(\"data/Ship.csv\")\n\nRows: 2736 Columns: 18\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (5): Ship_Type, Route_Type, Engine_Type, Maintenance_Status, Weather_C...\ndbl  (12): Speed_Over_Ground_knots, Engine_Power_kW, Distance_Traveled_nm, D...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#select-variables",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#select-variables",
    "title": "Take-home Exercise 1",
    "section": "3.1 Select Variables",
    "text": "3.1 Select Variables\nBefore we begin with the analysis, let us do some variable analysis and check the columns that we will be using for this analysis. Each row of the dataset represents the performance metrics and attributes for a specific voyage/ship over a given timeframe.\n\ncolnames(ship)\n\n [1] \"Date\"                    \"Ship_Type\"              \n [3] \"Route_Type\"              \"Engine_Type\"            \n [5] \"Maintenance_Status\"      \"Speed_Over_Ground_knots\"\n [7] \"Engine_Power_kW\"         \"Distance_Traveled_nm\"   \n [9] \"Draft_meters\"            \"Weather_Condition\"      \n[11] \"Cargo_Weight_tons\"       \"Operational_Cost_USD\"   \n[13] \"Revenue_per_Voyage_USD\"  \"Turnaround_Time_hours\"  \n[15] \"Efficiency_nm_per_kWh\"   \"Seasonal_Impact_Score\"  \n[17] \"Weekly_Voyage_Count\"     \"Average_Load_Percentage\"\n\n\nFor easier read, let us list down all the columns in the table below to analyse the data types and the description.\n\nShip Dataframe\n\n\n\n\n\n\n\n\n\nColumn Name\nType\nDescription\n\n\n\n\nDate\ndate\ntimestamp of data entry\n\n\nShip_Type\ncategorical\ntypes of vessel\n\n\nRoute_Type\ncategorical\ntypes of route\n\n\nEngine_Type\ncategorical\ntypes of ship engine\n\n\nMaintenance_Status\ncategorical\ncurrent maintenance status\n\n\nSpeed_Over_Ground_knots\nnumerical\naverage speed (knots)\n\n\nEngine_Power_kW\nnumerical\nengine power output (kW)\n\n\nDistance_Traveled_nm\nnumerical\ntotal distance travelled (nm)\n\n\nDraft_meters\nnumerical\ndraft of the vessel (m)\n\n\nWeather_Condition\ncategorical\nweather condition during operations\n\n\nCargo_Weight_tons\nnumerical\nweight of goods on the ship (tons)\n\n\nOperational_Cost_USD\nnumerical\ntotal operational cost per voyage (USD)\n\n\nRevenue_per_Voyage_USD\nnumerical\ntotal revenue generated per voyage (USD)\n\n\nTurnaround_Time_hours\nnumerical\ntime taken per voyage (hours)\n\n\nEfficiency_nm_per_kWh\nnumerical\nenergy efficiency (nm/kWh)\n\n\nSeasonal_Impact_Score\nnumerical\nnot listed in Kaggle\n\n\nWeekly_Voyage_Count\ninteger\ntotal no. of voyage per week\n\n\nAverage_Load_Percentage\npercentage (%)\nnot listed in Kaggle"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#remove-columns",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#remove-columns",
    "title": "Take-home Exercise 1",
    "section": "3.2 Remove Columns",
    "text": "3.2 Remove Columns\nFrom the table, we will keep all the categorical and numerical columns to gain further insights on this dataset. There are 3 columns that we should remove from this dataset, which are Date, Seasonal_Impact_Score and Average_Load_Percentage.\n\nDate: This column is removed because it only consists of the timestamp of the data entry, which is not necessarily value-add to this analysis.\nSeasonal_Impact_Score: This column is removed because there is no description of how the value in this column is calculated. As there is no details on the column calculation, there will be no insights gained from analysing this column.\nAverage_Load_Percentage: This column is removed because there is no description and source of the column calculation, hence, there is no need to use this column for the analysis.\n\nThe 3 columns will be removed using the code chunk below:\n\nship &lt;- ship %&gt;% select(-c(\"Date\", \"Seasonal_Impact_Score\", \"Average_Load_Percentage\"))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#handling-missing-value",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#handling-missing-value",
    "title": "Take-home Exercise 1",
    "section": "3.3 Handling Missing Value",
    "text": "3.3 Handling Missing Value\n\n3.3.1 Categorical Column\n\ntable(ship$Ship_Type)\n\n\n  Bulk Carrier Container Ship   Fish Carrier           None         Tanker \n           669            635            653            136            643 \n\n\n\ntable(ship$Route_Type)\n\n\n     Coastal    Long-haul         None   Short-haul Transoceanic \n         650          686          136          626          638 \n\n\n\ntable(ship$Engine_Type)\n\n\n              Diesel Heavy Fuel Oil (HFO)                 None \n                 892                  853                  136 \n       Steam Turbine \n                 855 \n\n\n\ntable(ship$Maintenance_Status)\n\n\nCritical     Fair     Good     None \n     860      867      873      136 \n\n\n\ntable(ship$Weather_Condition)\n\n\n    Calm Moderate     None    Rough \n     893      891      136      816 \n\n\n\nship &lt;- ship[ship$Ship_Type != \"None\", ]\nship &lt;- ship[ship$Route_Type != \"None\", ]\nship &lt;- ship[ship$Engine_Type != \"None\", ]\nship &lt;- ship[ship$Maintenance_Status != \"None\", ]\nship &lt;- ship[ship$Weather_Condition != \"None\", ]\n\n\ndim(ship)\n\n[1] 2127   15\n\n\n\n\n3.3.2 Numerical Column\nIn this section, we will further clean numerical data type column to ensure the entire dataset is clean. The code chunks below will check the sum of null values of each numerical column.\n\nsum(is.na(ship$Speed_Over_Ground_knots))\n\n[1] 0\n\n\n\nsum(is.na(ship$Engine_Power_kW))\n\n[1] 0\n\n\n\nsum(is.na(ship$Distance_Traveled_nm))\n\n[1] 0\n\n\n\nsum(is.na(ship$Draft_meters))\n\n[1] 0\n\n\n\nsum(is.na(ship$Cargo_Weight_tons))\n\n[1] 0\n\n\n\nsum(is.na(ship$Operational_Cost_USD))\n\n[1] 0\n\n\n\nsum(is.na(ship$Revenue_per_Voyage_USD))\n\n[1] 0\n\n\n\nsum(is.na(ship$Turnaround_Time_hours))\n\n[1] 0\n\n\n\nsum(is.na(ship$Efficiency_nm_per_kWh))\n\n[1] 0\n\n\n\nsum(is.na(ship$Weekly_Voyage_Count))\n\n[1] 0\n\n\n\nglimpse(ship)\n\nRows: 2,127\nColumns: 15\n$ Ship_Type               &lt;chr&gt; \"Fish Carrier\", \"Container Ship\", \"Bulk Carrie…\n$ Route_Type              &lt;chr&gt; \"Short-haul\", \"Long-haul\", \"Transoceanic\", \"Tr…\n$ Engine_Type             &lt;chr&gt; \"Steam Turbine\", \"Diesel\", \"Steam Turbine\", \"D…\n$ Maintenance_Status      &lt;chr&gt; \"Good\", \"Fair\", \"Fair\", \"Fair\", \"Fair\", \"Criti…\n$ Speed_Over_Ground_knots &lt;dbl&gt; 10.38758, 20.74975, 21.05510, 13.74278, 18.616…\n$ Engine_Power_kW         &lt;dbl&gt; 1796.0574, 1648.5567, 915.2618, 1089.7218, 217…\n$ Distance_Traveled_nm    &lt;dbl&gt; 1060.4864, 658.8741, 1126.8225, 1445.2812, 723…\n$ Draft_meters            &lt;dbl&gt; 14.653083, 7.199261, 11.789063, 9.727833, 14.9…\n$ Weather_Condition       &lt;chr&gt; \"Rough\", \"Moderate\", \"Moderate\", \"Moderate\", \"…\n$ Cargo_Weight_tons       &lt;dbl&gt; 162.3947, 178.0409, 1737.3853, 260.5951, 1912.…\n$ Operational_Cost_USD    &lt;dbl&gt; 483388.00, 448543.40, 261349.61, 287718.38, 18…\n$ Revenue_per_Voyage_USD  &lt;dbl&gt; 883765.79, 394018.75, 87551.38, 676121.46, 776…\n$ Turnaround_Time_hours   &lt;dbl&gt; 63.24820, 49.41815, 22.40911, 64.15823, 47.476…\n$ Efficiency_nm_per_kWh   &lt;dbl&gt; 0.2903614, 0.4995945, 0.7029057, 1.3313431, 1.…\n$ Weekly_Voyage_Count     &lt;dbl&gt; 6, 9, 1, 8, 7, 3, 6, 2, 9, 4, 3, 7, 7, 2, 4, 3…\n\n\naverage operational cost per ship type, average revenue per ship type, stats of voyage per week"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#check-for-outliers-in-numerical-column",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#check-for-outliers-in-numerical-column",
    "title": "Take-home Exercise 1",
    "section": "3.4 Check for Outliers in Numerical Column",
    "text": "3.4 Check for Outliers in Numerical Column\nThere are total of 10 numerical columns that we can use for our statistical analysis. In this section, we will do an individual column check to see whether there is outliers affecting the column of the dataset.\n\nboxplot.stats(ship$Speed_Over_Ground_knots)$out\n\nnumeric(0)\n\n\n\nboxplot.stats(ship$Engine_Power_kW)$out\n\nnumeric(0)\n\n\n\nboxplot.stats(ship$Distance_Traveled_nm)$out\n\nnumeric(0)\n\n\n\nboxplot.stats(ship$Draft_meters)$out\n\nnumeric(0)\n\n\n\nboxplot.stats(ship$Operational_Cost_USD)$out\n\nnumeric(0)\n\n\n\nboxplot.stats(ship$Cargo_Weight_tons)$out\n\nnumeric(0)\n\n\n\nboxplot.stats(ship$Revenue_per_Voyage_USD)$out\n\nnumeric(0)\n\n\n\nboxplot.stats(ship$Turnaround_Time_hours)$out\n\nnumeric(0)\n\n\n\nboxplot.stats(ship$Efficiency_nm_per_kWh)$out\n\nnumeric(0)\n\n\n\nboxplot.stats(ship$Weekly_Voyage_Count)$out\n\nnumeric(0)\n\n\nThe result from the codes above shows that there are no potential outliers affecting the dataset."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#derive-new-columns",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#derive-new-columns",
    "title": "Take-home Exercise 1",
    "section": "3.5 Derive New Columns",
    "text": "3.5 Derive New Columns\nTo gain more insights on this analysis, let us derive a new column to find out the profit gained on each voyage of the ships. The code chunk below will use mutate() to derive the new column.\n\nship &lt;- ship %&gt;% \n  mutate(Profit_per_Voyage_USD = Revenue_per_Voyage_USD - Operational_Cost_USD)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#profit-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#profit-analysis",
    "title": "Take-home Exercise 1",
    "section": "4.1 Profit Analysis",
    "text": "4.1 Profit Analysis\n\nprofit &lt;- ship[ship$Profit_per_Voyage_USD &gt;= 0, ]\n\nLet us plot a the distribution of profit earned per voyage using the histogram below.\n\nPlotCode\n\n\n\n\n\n\n\n\nThe histogram shows a normal distribution ranging from USD -500,000 to USD 1,000,000. The distribution of profit is symmetrical with the highest count at USD 250,000. Normal distribution shows that it is uncommon to have a very high profit, and it is also uncommon to get extreme losses from ship journey. The x-axis shows there are presence of negative profit value, ranging from USD 0 to USD -500,000. Although the occurrence is not as often, is is still a questionable event of why certain ships incur losses in the ship operations. The histogram roughly highlights financial variability in the ship and maritime industry.\n\n\n\nv1 &lt;- ggplot(data = ship, aes(x = Profit_per_Voyage_USD)) + \n  geom_histogram(bins = 50,\n                 color = \"black\",\n                 fill = \"grey\") + \n  coord_cartesian(xlim=c(-500000,1000000),\n                  ylim=c(0,80)) + \n  scale_x_continuous(\"Profit (USD)\",               \n                     breaks = seq(-500000, 1000000, by = 250000),\n                     labels = scales::comma) +\n  labs(\n    title = \"Profit Distribution of Ships per Voyage (USD)\",\n    y = \"Count\"\n  ) + \n  theme_minimal()\n\nggplotly(v1)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#loss-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#loss-analysis",
    "title": "Take-home Exercise 1",
    "section": "4.2 Loss Analysis",
    "text": "4.2 Loss Analysis\n\n4.2.1 Loss Incurred by Ship Types\nAfter the distribution plot, we are interested to find out the reason of loss incurred in the maritime industry. Let us create a new dataframe to do further analysis on the losses.\n\nloss &lt;- ship[ship$Profit_per_Voyage_USD &lt; 0, ]\n\n\nPlotCode\n\n\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\nThe plot suggests that bulk carrier incurs the most losses as compared to other types of ship. Bulk carrier has a mean loss of USD 181,054 with a margin of error of USD 10,185. Other ship types incur a mean loss ranging from USD 140,000 to 160,000. From this plot, we are curious on why bulk carriers incur such a big loss in operating their ship.\n\n\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean Loss:\", mean, \"+/-\", sem)\n}\n\nv2 &lt;- ggplot(data=loss, \n                   aes(x = Ship_Type),\n) +\n  stat_summary(aes(y = Profit_per_Voyage_USD, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = Profit_per_Voyage_USD),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  ) + \n  labs(\n    title = \"Loss per Voyage by Ship Type\",\n    x = \"Ship Type\",\n    y = \"Profit/Loss per Voyage (USD)\"\n  )\n\ngirafe(ggobj = v2,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n4.2.2 Bulk Carrier Analysis\nFrom the previous plot, we want to further deep dive into bulk carrier ship to find out the reason of such a big loss in operating this ship. Hence, let us derive a new dataframe by filtering out only the bulk carriers data using the code below.\n\nbc &lt;- ship[ship$Ship_Type == \"Bulk Carrier\",]\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nThere are 3 types of engines that could be used to operate a bulk carrier, Steam Turbine, Heavy Fuel Oil and Diesel. The boxplot suggests that, on average, it requires more cost to use Heavy Fuel Oil. The half eye graph shows the distribution shape of the operational cost. Heavy Fuel Oil and Steam Turbine have higher peaks, while Diesel has lower density distribution. This means that the cost of using Diesel is more spread out as compared to other engine types."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#ship-type-and-route-type-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#ship-type-and-route-type-analysis",
    "title": "Take-home Exercise 1",
    "section": "4.3 Ship Type and Route Type Analysis",
    "text": "4.3 Ship Type and Route Type Analysis\n\n4.3.1 Loss Incurred by Each Ship Type and Route Type\nIn this section, we will further breakdown each ship type according to the route type and analyse the profit and loss incurred from each voyage.\n\nPlotCode\n\n\n\n\n\n\n\n\nThis code visualizes the count of ship type by each route type that incurred losses during the ship operations. The chart suggests that container ship that uses long-haul route incurred the most losses as compared to other types of route. The second most loss incurred is bulk carrier that uses coastal route and also short-haul. Container ships and bulk carrier typically weighs significantly higher than other types of ship. Hence, the high operational cost that outweighs the revenue of the ship operations.\n\n\n\nv4 &lt;- ggplot(data = loss, \n            aes(x = Ship_Type, fill = Route_Type)) +\n  geom_bar(stat = \"count\", \n           position = \"dodge\", \n           width = 0.7) +\n  scale_y_continuous(limits = c(0, 50)) +\n  scale_fill_manual(values = c(\"steelblue\", \"slategray\", \"darkslategray\", \"lightsteelblue\")) +\n  theme_minimal() +\n  labs(x = \"Ship Type\", \n       y = \"Count\", \n       title = \"Ship Type Distribution by Route Type that Incurred Loss\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n\nggplotly(v4)\n\n\n\n\n\n\n4.3.2 Operational Cost\nAccording to the previous plot, container ship has the most count of ship operations that incurred losses. Hence, we are interested to find out the operational cost distribution of each type of ships from all the data entry that has higher cost than revenue.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nThe half eye distribution shows that container ship graph is skewed to the left and has higher count for operational cost above the median point. While bulk carrier and fish carrier distribution is also heavily left-skewed, the median point is still lower than container ship’s data.\n\n\n\nv5 &lt;- ggplot(loss, \n       aes(x = Ship_Type, \n           y = Operational_Cost_USD)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA,\n               position = position_nudge(x = -0.2)) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  scale_y_continuous(\"Operational Cost (USD)\",               \n                     breaks = seq(0, 500000, by = 100000),\n                     labels = scales::comma) +\n  labs(\n    title = \"Operational Cost Distribution of Bulk Carrier by Engine Type (USD)\"\n  ) + \n  coord_flip() +\n  theme_minimal()\n\nv5\n\n\n\n\n\n\n4.3.3 Mean Weights of Goods in the Ship\nAccording to the previous figure, we have concluded that the high operational cost of container ship and bulk carrier could be due to the cargo weights, which results in more maintenance needs or machine requirements. Hence, we will plot a visual to see whether container ships and bulk carriers has significantly more weights.\n\nPlotCode\n\n\n\n\n\n\n\n\nThe plot above proves that container ship and bulk carrier don’t have the highest weight. In fact, fish carrier has the highest mean weight as compared to the other ship types. This means that the cause of high operational cost of container ship and bulk carrier could be due to other possible reasons.\n\n\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean Weight:\", mean, \"+/-\", sem)\n}\n\nv6 &lt;- ggplot(data=loss, \n                   aes(x = Ship_Type),\n) +\n  stat_summary(aes(y = Cargo_Weight_tons, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"steelblue\"\n  ) +\n  stat_summary(aes(y = Cargo_Weight_tons),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  ) + \n  labs(\n    title = \"Mean Weights of Ship Types that Incurred Loss\",\n    x = \"Ship Type\",\n    y = \"Weight (tons)\"\n  )\n\ngirafe(ggobj = v6,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n4.3.4 Median Speed of Each Ship Types\nLet us plot a boxplot to find out whether the speed of the ship affects the high operational cost in shipping industry.\n\nPlotCode\n\n\n\n\n\n\n\n\nFrom this boxplot, we can see that container ship has the highest median of ship speed. The high operational cost of container ship could potentially be caused by the machine or engine requirements to operate faster ships. This could also be caused by other required logistics that might be more complicated in container ship as compared to a fish carrier.\n\n\n\nv7 &lt;- ggplot(loss, \n       aes(x = Ship_Type, \n           y = Speed_Over_Ground_knots)) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA,\n               position = position_nudge(x = -0.2)) +\n  labs(\n    title = \"Boxplot of Ship Speed by Ship Type\",\n    x = \"Ship Type\",\n    y = \"Speed\"\n  )\n\nggplotly(v7)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#maintenance-status-of-ships-that-incurs-losses",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#maintenance-status-of-ships-that-incurs-losses",
    "title": "Take-home Exercise 1",
    "section": "4.4 Maintenance Status of Ships That Incurs Losses",
    "text": "4.4 Maintenance Status of Ships That Incurs Losses\nIn this section, we will highlight ships with critical maintenance status. The purpose is to focus on ships with bad maintenance quality and pay attention to ship types that require more maintenance.\nBefore we create the plot, let us calculate the percentage of ships with critical maintenance status using the code below.\n\nc8 &lt;- ship %&gt;%\n  group_by(Ship_Type) %&gt;%\n  summarise(\n    Total = n(),\n    Critical_Count = sum(Maintenance_Status == \"Critical\"),\n    Critical_Percentage = (Critical_Count / Total) * 100\n  )\n\nAfter deriving a variable to calculate the percentage, now let us plot and compare the maintenance status of each ship type.\n\nPlotCode\n\n\n\n\n\n\n\n\nFrom the bar chart, container ship has the highest percentage of ships that is not well-maintained. A well-maintained ship can help reduce the repair cost and the frequency of repairs, minimize downtime to help ship operate efficiently and it will also help them attract more businesses to use the service. This data shows that we should pay more attention to maintenance to help a smoother operations in the maritime industry.\n\n\n\nv8 &lt;- ggplot(c8, aes(x = Ship_Type,\n                             y = Critical_Percentage,\n                             fill = Ship_Type)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(label = paste0(round(Critical_Percentage, 1), \"%\")),\n            vjust = -0.5) +\n  scale_fill_brewer(palette = \"Set2\") +\n  labs(title = \"Percentage of Critical Maintenance Status by Ship Type\",\n       x = \"Ship Type\",\n       y = \"Percentage of Critical Status\") +\n  theme_minimal()\n\nggplotly(v8)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#join-weather-data-and-station-data",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#join-weather-data-and-station-data",
    "title": "Take-home Exercise 3",
    "section": "3.1 Join Weather Data and Station Data",
    "text": "3.1 Join Weather Data and Station Data\n\ndaily_weather &lt;- left_join(station, weather,\n                         by = c(\"Station\" = \"station\"),\n                         relationship = \"many-to-many\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#set-crs",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#set-crs",
    "title": "Take-home Exercise 3",
    "section": "3.2 Set CRS",
    "text": "3.2 Set CRS\n\ndaily_weather &lt;- st_as_sf(daily_weather, \n                      coords = c(\"Longitude\",\n                                 \"Latitude\"),\n                      crs= 4326) %&gt;%\n  st_transform(crs = 3414)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#derive-monthly-data",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#derive-monthly-data",
    "title": "Take-home Exercise 3",
    "section": "3.7 Derive Monthly Data",
    "text": "3.7 Derive Monthly Data\n\n# Create a dataset with all combinations of yearmonth and Station (to keep all stations)\nall_combinations &lt;- daily_weather %&gt;%\n  st_drop_geometry() %&gt;% # Drop geometry temporarily\n  distinct(yearmonth, Station) \n\n\n3.7.1 Monthly Rainfall\n\n# Merge the combinations back to weather_map to fill in missing rainfall data\nmonthly_rainfall &lt;- daily_weather %&gt;%\n  group_by(yearmonth, Station, geometry) %&gt;%\n  summarize(\n    max_rainfall = if (all(is.na(rainfall_total))) NA_real_ else max(rainfall_total, na.rm = TRUE),\n    mean_rainfall = if (all(is.na(rainfall_total))) NA_real_ else mean(rainfall_total, na.rm = TRUE),\n    .groups = \"drop\"\n  ) %&gt;%\n  right_join(all_combinations, by = c(\"yearmonth\", \"Station\")) %&gt;%\n  arrange(yearmonth, Station)\n\n\nmonths_2024 &lt;- seq(ymd(\"2024-01-01\"), ymd(\"2024-12-01\"), by = \"month\")\n\nstations_missing_yearmonth &lt;- monthly_rainfall %&gt;%\n  filter(is.na(yearmonth)) %&gt;%\n  mutate(yearmonth = list(months_2024)) %&gt;% # Append rows for remaining stations\n  unnest(yearmonth)\n\nmonthly_rainfall &lt;- monthly_rainfall %&gt;%\n  filter(!is.na(yearmonth)) %&gt;%\n  bind_rows(stations_missing_yearmonth) %&gt;%\n  arrange(Station, yearmonth)\n\n\n\n3.7.2 Monthly Temperature\n\nmonthly_temp &lt;- daily_weather %&gt;%\n  group_by(yearmonth, Station, geometry) %&gt;%\n  summarize(\n    max_temp = if (all(is.na(max_temp))) NA_real_ else max(max_temp, na.rm = TRUE),\n    mean_temp = if (all(is.na(mean_temp))) NA_real_ else mean(mean_temp, na.rm = TRUE),\n    .groups = \"drop\"\n  ) %&gt;%\n  right_join(all_combinations, by = c(\"yearmonth\", \"Station\")) %&gt;%\n  arrange(yearmonth, Station)\n\n\nmonths_2024 &lt;- seq(ymd(\"2024-01-01\"), ymd(\"2024-12-01\"), by = \"month\")\n\nstations_missing_yearmonth &lt;- monthly_temp %&gt;%\n  filter(is.na(yearmonth)) %&gt;%\n  mutate(yearmonth = list(months_2024)) %&gt;% # Append rows for remaining stations\n  unnest(yearmonth)\n\nmonthly_temp &lt;- monthly_temp %&gt;%\n  filter(!is.na(yearmonth)) %&gt;%\n  bind_rows(stations_missing_yearmonth) %&gt;%\n  arrange(Station, yearmonth)\n\n\n\n3.7.3 Monthly Wind Speed\n\nmonthly_wind &lt;- daily_weather %&gt;%\n  group_by(yearmonth, Station, geometry) %&gt;%\n  summarize(\n    max_wind = if (all(is.na(max_wind))) NA_real_ else max(max_wind, na.rm = TRUE),\n    mean_wind = if (all(is.na(mean_wind))) NA_real_ else mean(mean_wind, na.rm = TRUE),\n    .groups = \"drop\"\n  ) %&gt;%\n  right_join(all_combinations, by = c(\"yearmonth\", \"Station\")) %&gt;%\n  arrange(yearmonth, Station)\n\n\nmonths_2024 &lt;- seq(ymd(\"2024-01-01\"), ymd(\"2024-12-01\"), by = \"month\")\n\nstations_missing_yearmonth &lt;- monthly_wind %&gt;%\n  filter(is.na(yearmonth)) %&gt;%\n  mutate(yearmonth = list(months_2024)) %&gt;% # Append rows for remaining stations\n  unnest(yearmonth)\n\nmonthly_wind &lt;- monthly_wind %&gt;%\n  filter(!is.na(yearmonth)) %&gt;%\n  bind_rows(stations_missing_yearmonth) %&gt;%\n  arrange(Station, yearmonth)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#join-mpsz-and-weather",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#join-mpsz-and-weather",
    "title": "Take-home Exercise 3",
    "section": "3.8 Join mpsz and weather",
    "text": "3.8 Join mpsz and weather\n\nweather_nogeom &lt;- st_drop_geometry(daily_weather)\n\n\nmap &lt;- left_join(mpsz, weather_nogeom,\n                         by = c(\"SUBZONE_N\" = \"Station\"),\n                         relationship = \"many-to-many\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#inverse-distance-weighted-idw",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#inverse-distance-weighted-idw",
    "title": "Take-home Exercise 3",
    "section": "4.1 Inverse Distance Weighted (IDW)",
    "text": "4.1 Inverse Distance Weighted (IDW)\n\nmonthly_rainfall_with_data &lt;- monthly_rainfall %&gt;%\n  filter(!is.na(frequency_heavy_rain))\n\n\ngrid &lt;- terra::rast(mpsz, \n                    nrows = 690, \n                    ncols = 1075)\ngrid\n\nclass       : SpatRaster \ndimensions  : 690, 1075, 1  (nrow, ncol, nlyr)\nresolution  : 49.98037, 50.01103  (x, y)\nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncoord. ref. : SVY21 / Singapore TM (EPSG:3414) \n\n\n\nxy &lt;- terra::xyFromCell(grid, \n                        1:ncell(grid))\nhead(xy)\n\n            x        y\n[1,] 2692.528 50231.33\n[2,] 2742.509 50231.33\n[3,] 2792.489 50231.33\n[4,] 2842.469 50231.33\n[5,] 2892.450 50231.33\n[6,] 2942.430 50231.33\n\n\n\ncoop &lt;- st_as_sf(as.data.frame(xy), \n                 coords = c(\"x\", \"y\"),\n                 crs = st_crs(mpsz))\ncoop &lt;- st_filter(coop, mpsz)\nhead(coop)\n\nSimple feature collection with 6 features and 0 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 25883.42 ymin: 50231.33 xmax: 26133.32 ymax: 50231.33\nProjected CRS: SVY21 / Singapore TM\n                   geometry\n1 POINT (25883.42 50231.33)\n2  POINT (25933.4 50231.33)\n3 POINT (25983.38 50231.33)\n4 POINT (26033.36 50231.33)\n5 POINT (26083.34 50231.33)\n6 POINT (26133.32 50231.33)\n\n\n\nres &lt;- gstat(formula = frequency_heavy_rain ~ 1, \n             locations = monthly_rainfall_with_data, \n             nmax = 5,\n             set = list(idp = 0))\n\n\nresp &lt;- predict(res, coop)\n\n[inverse distance weighted interpolation]\n\n\n\nresp$x &lt;- st_coordinates(resp)[,1]\nresp$y &lt;- st_coordinates(resp)[,2]\nresp$pred &lt;- resp$var1.pred\n\npred &lt;- terra::rasterize(resp, grid, \n                         field = \"pred\", \n                         fun = \"mean\")\n\n\ntm_check_fix()\n\n[nothing to show] no data layers defined\n\ntmap_mode(\"plot\")\n\nℹ tmap mode set to \"plot\".\n\ntm_shape(pred) +\n  tm_raster(col_alpha = 0.6,\n            col.scale = tm_scale(\n              values = \"brewer.blues\")) +\n  tm_title(\"IDW Mean Frequency of Heavy Rain\", size=1.5) +\n  tm_shape(monthly_rainfall_with_data) +\n  tm_text(\"Station\", size=1, col=\"black\", alpha = 0.7)\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#monthly-maximum-rainfall-by-station",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#monthly-maximum-rainfall-by-station",
    "title": "Take-home Exercise 3",
    "section": "4.2 Monthly Maximum Rainfall by Station",
    "text": "4.2 Monthly Maximum Rainfall by Station\n\njan_rainfall &lt;- monthly_rainfall %&gt;% \n  filter(month == \"January\")\n\ntmap_mode(\"plot\")\n\nℹ tmap mode set to \"plot\".\n\ntm_shape(map) +\n  tm_layout(\n    main.title = \"Maximum Rainfall (mm) in January 2024\",\n    main.title.position = \"center\",\n    main.title.size = 1.2,\n    legend.position = c(\"RIGHT\", \"BOTTOM\"),\n    legend.title.size = 0.8,\n    legend.text.size = 0.8,\n    legend.outside = TRUE,\n    legend.outside.position = \"bottom\",\n    legend.frame = FALSE,\n    frame = TRUE\n  ) +\n  tm_shape(jan_rainfall) +\n  tm_symbols(\n    col = \"max_rainfall\",  # Measurement Parameters here\n    palette = \"Blues\",\n    title.col = \"Max Rainfall (mm)\",\n    popup.vars = c(\"Station\", \"max_rainfall\"),\n    legend.size.show = FALSE\n  ) +\n  tm_shape(jan_rainfall) +\n  tm_text(\"Station\", size = 0.7, col = \"black\", shadow = FALSE, ymod=1) +\n  tm_grid(alpha = 0.2) +\n  tm_basemap(\"CartoDB.Positron\")\n\n[v3-&gt;v4] `tm_layout()`: use `tm_title()` instead of `tm_layout(main.title = )`\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────\n\n[v3-&gt;v4] `tm_symbols()`: migrate the argument(s) related to the scale of the\nvisual variable `fill` namely 'palette' (rename to 'values') to fill.scale =\ntm_scale(&lt;HERE&gt;).\n[v3-&gt;v4] `symbols()`: use 'fill' for the fill color of polygons/symbols\n(instead of 'col'), and 'col' for the outlines (instead of 'border.col').\n[v3-&gt;v4] `symbols()`: migrate the argument(s) related to the legend of the\nvisual variable `fill` namely 'title.col' (rename to 'title') to 'fill.legend =\ntm_legend(&lt;HERE&gt;)'\n[v3-&gt;v4] `symbols()`: use `size.legend = tm_legend_hide()` instead of\n`legend.size.show = FALSE`.\n[v3-&gt;v4] `tm_text()`: migrate the layer options 'shadow' to 'options =\nopt_tm_text(&lt;HERE&gt;)'\n[cols4all] color palettes: use palettes from the R package cols4all. Run\n`cols4all::c4a_gui()` to explore them. The old palette name \"Blues\" is named\n\"brewer.blues\"\nMultiple palettes called \"blues\" found: \"brewer.blues\", \"matplotlib.blues\". The first one, \"brewer.blues\", is returned.\n\n\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\nℹ tmap mode set to \"plot\".\n\ntm_shape(map) +\n  tm_layout(\n    main.title = \"Frequency of Heavy Rain in January 2024\",\n    main.title.position = \"center\",\n    main.title.size = 1.2,\n    legend.position = c(\"RIGHT\", \"BOTTOM\"),\n    legend.title.size = 0.8,\n    legend.text.size = 0.8,\n    legend.outside = TRUE,\n    legend.outside.position = \"bottom\",\n    legend.frame = FALSE,\n    frame = TRUE\n  ) +\n  tm_shape(jan_rainfall) +\n  tm_symbols(\n    col = \"frequency_heavy_rain\",  # Measurement Parameters here\n    palette = \"Red\",\n    title.col = \"Frequency of Heavy Rain\",\n    popup.vars = c(\"Station\", \"frequency_heavy_rain\"),\n    legend.size.show = FALSE\n  ) +\n  tm_shape(jan_rainfall) +\n  tm_text(\"Station\", size = 0.7, col = \"black\", shadow = FALSE, ymod=-1) +\n  tm_grid(alpha = 0.2) +\n  tm_basemap(\"CartoDB.Positron\")\n\n[v3-&gt;v4] `tm_layout()`: use `tm_title()` instead of `tm_layout(main.title = )`\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────\n\n[v3-&gt;v4] `tm_symbols()`: migrate the argument(s) related to the scale of the\nvisual variable `fill` namely 'palette' (rename to 'values') to fill.scale =\ntm_scale(&lt;HERE&gt;).\n[v3-&gt;v4] `symbols()`: migrate the argument(s) related to the legend of the\nvisual variable `fill` namely 'title.col' (rename to 'title') to 'fill.legend =\ntm_legend(&lt;HERE&gt;)'\n[v3-&gt;v4] `symbols()`: use `size.legend = tm_legend_hide()` instead of\n`legend.size.show = FALSE`.\n[v3-&gt;v4] `tm_text()`: migrate the layer options 'shadow' to 'options =\nopt_tm_text(&lt;HERE&gt;)'\n[cols4all] color palettes: use palettes from the R package cols4all. Run\n`cols4all::c4a_gui()` to explore them. The old palette name \"Red\" is named\n\"red\" (in long format \"tableau.red\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#visualising-frequency-of-rainfall",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#visualising-frequency-of-rainfall",
    "title": "Take-home Exercise 3",
    "section": "4.3 Visualising Frequency of Rainfall",
    "text": "4.3 Visualising Frequency of Rainfall\n\nmin_x &lt;- as.Date(\"2023-12-01\")\nmax_x &lt;- as.Date(\"2024-04-01\")\n\nmonthly_rainfall_station &lt;- monthly_rainfall %&gt;%\n  filter(Station %in% stations) %&gt;%\n  filter(format(as.Date(yearmonth), \"%m\") %in% c(\"01\", \"02\", \"03\"))\n\n# Plot the bar charts for the selected stations\nggplot(monthly_rainfall_station, aes(x = yearmonth, y = frequency_heavy_rain)) +\n  geom_bar(stat = \"identity\", fill = \"royalblue\") +\n  labs(x = \"Month\", y = \"Frequency of Heavy Rain\") +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 90, size = 12, vjust = -0.0005),\n    strip.text = element_text(size = 12)\n  ) +\n  scale_x_date(\n    date_labels = \"%b\",\n    breaks = unique(monthly_rainfall_station$yearmonth),\n    limits = c(min_x, max_x),\n    expand = expansion(mult = c(0, 0))\n  ) +\n  facet_wrap(~Station, ncol = 4)\n\n\n\n\n\n\n\n\n\nmin_x &lt;- as.Date(\"2023-12-01\")\nmax_x &lt;- as.Date(\"2025-01-01\")\n\nggplot(monthly_rainfall, aes(x = yearmonth, y = frequency_heavy_rain)) +\n  geom_bar(stat = \"identity\", fill = \"royalblue\") +\n  labs(x = \"Month\", y = \"Frequency of Heavy Rain\") +\n  theme(axis.text.x = element_text(angle = 0)) +\n  scale_x_date(\n    date_labels = \"%b\",\n    breaks = monthly_rainfall$yearmonth,\n    limits = c(min_x, max_x),\n    expand = expansion(mult = c(0, 0))\n  )\n\nWarning: Removed 552 rows containing missing values or values outside the scale range\n(`geom_bar()`).\n\n\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\nℹ tmap mode set to \"plot\".\n\ntm_shape(jan_rainfall) +\n  tm_layout(\n    main.title = \"January Frequency of Heavy Rain\",\n    main.title.position = \"center\",\n    main.title.size = 1.2,\n    legend.position = c(\"RIGHT\", \"BOTTOM\"),\n    legend.title.size = 0.8,\n    legend.text.size = 0.8,\n    legend.outside = TRUE,\n    legend.outside.position = \"bottom\",\n    legend.frame = FALSE,\n    frame = TRUE\n  ) +\n  tm_shape(jan_rainfall_with_data) +\n  tm_symbols(\n    col = \"frequency_heavy_rain\",  # Measurement Parameters here\n    palette = \"-Green\",\n    title.col = \"Frequency of Heavy Rain\",\n    popup.vars = c(\"Station\", \"frequency_heavy_rain\"),\n    legend.size.show = FALSE\n  ) +\n  tm_shape(jan_rainfall_with_data) +\n  tm_text(\"Station\", size = 0.7, col = \"black\", shadow = FALSE, ymod=-1) +\n  tm_grid(alpha = 0.2) +\n  tm_basemap(\"CartoDB.Positron\")\n\n[v3-&gt;v4] `tm_layout()`: use `tm_title()` instead of `tm_layout(main.title = )`\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────\n\n[v3-&gt;v4] `tm_symbols()`: migrate the argument(s) related to the scale of the\nvisual variable `fill` namely 'palette' (rename to 'values') to fill.scale =\ntm_scale(&lt;HERE&gt;).\n[v3-&gt;v4] `symbols()`: migrate the argument(s) related to the legend of the\nvisual variable `fill` namely 'title.col' (rename to 'title') to 'fill.legend =\ntm_legend(&lt;HERE&gt;)'\n[v3-&gt;v4] `symbols()`: use `size.legend = tm_legend_hide()` instead of\n`legend.size.show = FALSE`.\n[v3-&gt;v4] `tm_text()`: migrate the layer options 'shadow' to 'options =\nopt_tm_text(&lt;HERE&gt;)'\nMultiple palettes called \"green\" found: \"kovesi.green\", \"tableau.green\". The first one, \"kovesi.green\", is returned.\n\n[cols4all] color palettes: use palettes from the R package cols4all. Run\n`cols4all::c4a_gui()` to explore them. The old palette name \"-Green\" is named\n\"green\" (in long format \"kovesi.green\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#remove-missing-values",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#remove-missing-values",
    "title": "Take-home Exercise 3",
    "section": "3.10 Remove Missing Values",
    "text": "3.10 Remove Missing Values\n\nmonthly_rainfall &lt;- na.omit(monthly_rainfall)\nmonthly_temp &lt;- na.omit(monthly_temp)\nmonthly_wind &lt;- na.omit(monthly_wind)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#combine-monthly-data",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#combine-monthly-data",
    "title": "Take-home Exercise 3",
    "section": "3.11 Combine Monthly Data",
    "text": "3.11 Combine Monthly Data\n\n# Extract geometry from monthly_temp (assuming geometry is the same across all dataframes)\ngeometry_data &lt;- monthly_temp %&gt;% select(Station, yearmonth, month, geometry)\n\n# Drop geometry using st_drop_geometry()\nmonthly_temp_no_geom &lt;- monthly_temp %&gt;% st_drop_geometry()\nmonthly_rainfall_no_geom &lt;- monthly_rainfall %&gt;% st_drop_geometry()\nmonthly_wind_no_geom &lt;- monthly_wind %&gt;% st_drop_geometry()\n\n# Perform full joins on non-spatial data\nmonthly_weather_no_geom &lt;- monthly_temp_no_geom %&gt;%\n  full_join(monthly_rainfall_no_geom, by = c(\"Station\", \"yearmonth\", \"month\")) %&gt;%\n  full_join(monthly_wind_no_geom, by = c(\"Station\", \"yearmonth\", \"month\"))\n\n# Reattach the geometry column\nmonthly_weather &lt;- left_join(monthly_weather_no_geom, geometry_data, by = c(\"Station\", \"yearmonth\", \"month\"))\n\n# Convert back to an sf object\nmonthly_weather &lt;- st_as_sf(monthly_weather)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#write-data-to-rds",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#write-data-to-rds",
    "title": "Take-home Exercise 3",
    "section": "3.12 Write Data to RDS",
    "text": "3.12 Write Data to RDS\n\nwrite_rds(monthly_weather, \"data/rds/monthly_weather.rds\", compress = \"xz\")\nwrite_rds(daily_weather, \"data/rds/daily_weather.rds\", compress = \"xz\")\nwrite_rds(monthly_rainfall, \"data/rds/monthly_rainfall.rds\", compress = \"xz\")\nwrite_rds(monthly_temp, \"data/rds/monthly_temp.rds\", compress = \"xz\")\nwrite_rds(monthly_wind, \"data/rds/monthly_wind.rds\", compress = \"xz\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#inverse-distance-weighted-idw-visual",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#inverse-distance-weighted-idw-visual",
    "title": "Take-home Exercise 3",
    "section": "4.1 Inverse Distance Weighted (IDW) Visual",
    "text": "4.1 Inverse Distance Weighted (IDW) Visual\n\ngrid &lt;- terra::rast(mpsz, \n                    nrows = 690, \n                    ncols = 1075)\ngrid\n\nclass       : SpatRaster \ndimensions  : 690, 1075, 1  (nrow, ncol, nlyr)\nresolution  : 49.98037, 50.01103  (x, y)\nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncoord. ref. : SVY21 / Singapore TM (EPSG:3414) \n\n\n\nxy &lt;- terra::xyFromCell(grid, \n                        1:ncell(grid))\nhead(xy)\n\n            x        y\n[1,] 2692.528 50231.33\n[2,] 2742.509 50231.33\n[3,] 2792.489 50231.33\n[4,] 2842.469 50231.33\n[5,] 2892.450 50231.33\n[6,] 2942.430 50231.33\n\n\n\ncoop &lt;- st_as_sf(as.data.frame(xy), \n                 coords = c(\"x\", \"y\"),\n                 crs = st_crs(mpsz))\ncoop &lt;- st_filter(coop, mpsz)\nhead(coop)\n\nSimple feature collection with 6 features and 0 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 25883.42 ymin: 50231.33 xmax: 26133.32 ymax: 50231.33\nProjected CRS: SVY21 / Singapore TM\n                   geometry\n1 POINT (25883.42 50231.33)\n2  POINT (25933.4 50231.33)\n3 POINT (25983.38 50231.33)\n4 POINT (26033.36 50231.33)\n5 POINT (26083.34 50231.33)\n6 POINT (26133.32 50231.33)\n\n\n\nres &lt;- gstat(formula = frequency_heavy_rain ~ 1, \n             locations = monthly_rainfall, \n             nmax = 5,\n             set = list(idp = 0))\n\n\nresp &lt;- predict(res, coop)\n\n[inverse distance weighted interpolation]\n\n\n\nresp$x &lt;- st_coordinates(resp)[,1]\nresp$y &lt;- st_coordinates(resp)[,2]\nresp$pred &lt;- resp$var1.pred\n\nidw &lt;- terra::rasterize(resp, grid, \n                         field = \"pred\", \n                         fun = \"mean\")\n\nwrite_rds(idw, \"data/rds/idw.rds\", compress = \"xz\")\n\n\ntm_check_fix()\n\n[nothing to show] no data layers defined\n\ntmap_mode(\"plot\")\n\nℹ tmap mode set to \"plot\".\n\ntm_shape(idw) +\n  tm_raster(col_alpha = 0.6,\n            col.scale = tm_scale(\n              values = \"brewer.blues\")) +\n  tm_title(\"IDW Mean Frequency of Heavy Rain\", size=1.5) +\n  tm_shape(monthly_weather) +\n  tm_text(\"Station\", size=1, col=\"black\", alpha = 0.7)\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#prototype-3-displaying-bar-chart-for-frequency-measure",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#prototype-3-displaying-bar-chart-for-frequency-measure",
    "title": "Take-home Exercise 3",
    "section": "4.3 Prototype 3: Displaying Bar Chart for Frequency Measure",
    "text": "4.3 Prototype 3: Displaying Bar Chart for Frequency Measure\n\n4.3.1 Side by Side Comparison of Stations\n\n# These variables will act as the filter in the Shiny app\nselected_month &lt;- \"February\"\nselected_variable &lt;- \"frequency_strong_wind\"\n\n\nvariable_titles &lt;- list(\n  \"frequency_heavy_rain\" = \"Heavy Rain\",\n  \"frequency_high_temperature\" = \"High Temperature\",\n  \"frequency_strong_wind\" = \"Strong Wind\"\n)\n\n\nselected_variable_title &lt;- variable_titles[[selected_variable]]\n\n\nmonthly_weather_filtered &lt;- monthly_weather %&gt;%\n  filter(month == selected_month)\n\n\nggplot(monthly_weather_filtered, aes(x = Station, y = .data[[selected_variable]], fill = Station)) +\n  geom_bar(stat = \"identity\", fill=\"royalblue\") +\n  labs(\n    title = paste(\"Frequency of\", selected_variable_title, \"in\", selected_month),\n    x = \"Station\", \n    y = \"Frequency\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 90, size = 10, vjust = 0.5),\n    strip.text = element_text(size = 12),\n    legend.position = \"none\"\n  ) +\n  scale_x_discrete(expand = expansion(mult = c(0, 0)))\n\n\n\n\n\n\n\n\n\n\n4.3.2 Side by Side Comparison of Monthly Records\n\nmin_x &lt;- as.Date(\"2023-12-01\")\nmax_x &lt;- as.Date(\"2024-04-01\")\n\nmonthly_rainfall_station &lt;- monthly_rainfall %&gt;%\n  filter(Station %in% stations) %&gt;%\n  filter(format(as.Date(yearmonth), \"%m\") %in% c(\"01\", \"02\", \"03\"))\n\n# Plot the bar charts for the selected stations\nggplot(monthly_rainfall_station, aes(x = yearmonth, y = frequency_heavy_rain)) +\n  geom_bar(stat = \"identity\", fill = \"royalblue\") +\n  labs(x = \"Month\", y = \"Frequency of Heavy Rain\") +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 90, size = 12, vjust = -0.0005),\n    strip.text = element_text(size = 12)\n  ) +\n  scale_x_date(\n    date_labels = \"%b\",\n    breaks = unique(monthly_rainfall_station$yearmonth),\n    limits = c(min_x, max_x),\n    expand = expansion(mult = c(0, 0))\n  ) +\n  facet_wrap(~Station, ncol = 4)"
  }
]