---
title: "Hands-on Exercise 9"
author: "Brigitta Karen Tsai"
date: "March 18, 2025"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  message: false
  freeze: true
---

# 1 Getting Started

## 1.1 Install and Load R Packages

```{r}
pacman::p_load(igraph, tidygraph, ggraph, 
               visNetwork, lubridate, clock,
               tidyverse, graphlayouts)
```

## 1.2 Import Data

```{r}
GAStech_nodes <- read_csv("data/GAStech_email_node.csv")
GAStech_edges <- read_csv("data/GAStech_email_edge-v2.csv")
```

## 1.3 Review Imported Data

```{r}
glimpse(GAStech_edges)
```

## 1.4 Wrangling Time

```{r}
GAStech_edges <- GAStech_edges %>%
  mutate(SendDate = dmy(SentDate)) %>%
  mutate(Weekday = wday(SentDate,
                        label = TRUE,
                        abbr = FALSE))
```

## 1.5 Review the Revised Date Fields

```{r}
glimpse(GAStech_edges)
```

## 1.6 Wrangling Attributes

```{r}
GAStech_edges_aggregated <- GAStech_edges %>%
  filter(MainSubject == "Work related") %>%
  group_by(source, target, Weekday) %>%
    summarise(Weight = n()) %>%
  filter(source!=target) %>%
  filter(Weight > 1) %>%
  ungroup()
```

## 1.7 Review the Revised Edges File

```{r}
glimpse(GAStech_edges_aggregated)
```

# 2 Creating Network Objects Using tidygraph

## 2.1 The tbl_graph object

There are 2 functions of **tidygraph** package can be used to create network objects,

1.  **tbl_graph()** creates a **tbl_graph** network object from nodes and edges data
2.  **as_tbl_graph()** converts network data and objects to a **tbls_graph** network. Below are network data and objects supported by **as_tbl_graph()**
    -   a node data.frame and an edge data.frame

    -   data.frame, list, matrix from base

    -   igraph from igraph

    -   network from network

    -   dendogram and hclust from stats

    -   Node from data.tree

    -   phylo and evonet from ape

    -   graphNEL, graphAM, graphBAM from graph (in Bioconductor)

## 2.2 The dplyr verbs in tidygraph

-   *activate()* verb from **tidygraph** works as a switch between tibbles for nodes and edges.

## 2.3 Using tbl_graph() to build tidygraph data model

```{r}
GAStech_graph <- tbl_graph(nodes = GAStech_nodes,
                           edges = GAStech_edges_aggregated, 
                           directed = TRUE)
```

## 2.4 Reviewing the output tidygraph's graph object

```{r}
GAStech_graph
```

-   The output shows that GAStech_graph is a tbl_graph object with **54 nodes** and **1,372 edges**

## 2.5 Changing the Active Object

The nodes tibble dataframe is activated by default, but we can change which tibble dataframe is active using the activate() function.

```{r}
GAStech_graph %>%
  activate(edges) %>%
  arrange(desc(Weight))
```

# 3 Plotting Static Network Graphs with ggraph package

There are 3 main aspects to a **ggraph**'s network graph:

1.  nodes
2.  edges
3.  layouts

## 3.1 Plotting Basic Network Graph

```{r}
ggraph(GAStech_graph) +
  geom_edge_link() +
  geom_node_point()
```

## 3.2 Changing the default network graph theme

```{r}
g <- ggraph(GAStech_graph) + 
  geom_edge_link(aes()) +
  geom_node_point(aes())

g + theme_graph()
```

## 3.3 Changing the Plot Color

```{r}
g <- ggraph(GAStech_graph) + 
  geom_edge_link(aes(colour = 'grey50')) +
  geom_node_point(aes(colour = 'grey40'))

g + theme_graph(background = 'grey10',
                text_colour = 'white')
```

## 3.4 Working with ggraph's Layouts

**ggraph** supports many layouts, such as:

-   star

-   circle

-   nicely (default)

-   dh

-   gem

-   graphopt

-   grid

-   mds

-   spahere

-   randomly

-   fr

-   kk

-   drl

-   lgl

## 3.5 Fruchterman and Reingold Layout

```{r}
g <- ggraph(GAStech_graph, 
            layout = "fr") +
  geom_edge_link(aes()) +
  geom_node_point(aes())

g + theme_graph()
```

## 3.6 Modifying Network Nodes

```{r}
g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes()) +
  geom_node_point(aes(colour = Department, 
                      size = 3))

g + theme_graph()
```

## 3.7 Modifying Edges

```{r}
g <- ggraph(GAStech_graph, 
            layout = "nicely") +
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 3)

g + theme_graph()
```

# 4 Creating Facet Graphs

There are 3 functions in ggraph to implement facets:

1.  **facet_nodes()**, where edges are only drawn in a panel if both terminal nodes are present
2.  **facet_edges()**, where nodes are always drawn in all panels even if the node data contains an attribute named the same as the one used for edge facetting
3.  **facet_graph()**, where it is possible to facet on 2 variables simultaneously

## 4.1 facet_edges()

```{r}
set_graph_style()

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2)

g + facet_edges(~Weekday)
```

We can use theme() to change the legend position

```{r}
set_graph_style()

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2) +
  theme(legend.position = 'bottom')
  
g + facet_edges(~Weekday)
```

## 4.2 A Framed Facet Graph

```{r}
set_graph_style() 

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2)
  
g + facet_edges(~Weekday) +
  th_foreground(foreground = "grey80",  
                border = TRUE) +
  theme(legend.position = 'bottom')
```

## 4.3 facet_nodes()

```{r}
set_graph_style()

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2)
  
g + facet_nodes(~Department)+
  th_foreground(foreground = "grey80",  
                border = TRUE) +
  theme(legend.position = 'bottom')
```

# 5 Network Metrics Analysis

## 5.1 Computing Centrality Indices

There are 4 common centrality measures: **degree, betweenness, closeness** and **eigenvector.** The code below uses betweenness measure.

```{r}
g <- GAStech_graph %>%
  mutate(betweenness_centrality = centrality_betweenness()) %>%
  ggraph(layout = "fr") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department,
            size=betweenness_centrality))
g + theme_graph()
```

## 5.2 Visualising Network Metrics

```{r}
g <- GAStech_graph %>%
  ggraph(layout = "fr") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department, 
                      size = centrality_betweenness()))
g + theme_graph()
```

## 5.3 Visualising Community

```{r}
g <- GAStech_graph %>%
  mutate(community = as.factor(group_edge_betweenness(weights = Weight, directed = TRUE))) %>%
  ggraph(layout = "fr") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = community))  

g + theme_graph()
```

# 6 Building Interactive Network Graph with visNetwork

## 6.1 Data Preparation

```{r}
GAStech_edges_aggregated <- GAStech_edges %>%
  left_join(GAStech_nodes, by = c("sourceLabel" = "label")) %>%
  rename(from = id) %>%
  left_join(GAStech_nodes, by = c("targetLabel" = "label")) %>%
  rename(to = id) %>%
  filter(MainSubject == "Work related") %>%
  group_by(from, to) %>%
    summarise(weight = n()) %>%
  filter(from!=to) %>%
  filter(weight > 1) %>%
  ungroup()
```

## 6.2 Plotting the first interactive network graph

```{r}
visNetwork(GAStech_nodes, 
           GAStech_edges_aggregated)
```

## 6.3 Working with Layout

```{r}
visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr") 
```

## 6.4 Working with visual attributes - Nodes

Rename department field to group:

```{r}
GAStech_nodes <- GAStech_nodes %>%
  rename(group = Department) 
```

```{r}
visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visLegend() %>%
  visLayout(randomSeed = 123)
```

## 6.5 Working with visual attributes - Edges

```{r}
visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", 
           smooth = list(enabled = TRUE, 
                         type = "curvedCW")) %>%
  visLegend() %>%
  visLayout(randomSeed = 123)
```

## 6.6 Interactivity

In the code below, we use **visOptions()** to incorporate interactivity features.

```{r}
visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visOptions(highlightNearest = TRUE,
             nodesIdSelection = TRUE) %>%
  visLegend() %>%
  visLayout(randomSeed = 123)
```
