---
title: "Take-home Exercise 3"
author: "Brigitta Karen Tsai"
date: "March 22, 2025"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  message: false
  freeze: true
---

# Prototyping Modules for Visual Analytics Shiny Application

# 1 Getting Started

## 1.1 Install and Load R Packages

```{r}
pacman::p_load(sp, sf, raster, spatstat, tmap, tidyverse,
               spNetwork, tmaptools, raster, leaflet)
```

# 2 Import Data

## 2.1 Import Aspatial Data

```{r}
weather <- read_csv("data/aspatial/weather.csv")
```

## 2.2 Import Geospatial Data

```{r}
mpsz <- st_read(dsn = "data/geospatial", 
                layer = "MP14_SUBZONE_WEB_PL")
```

# 3 Data Preparation

## 3.1 Match Station Names

```{r}
sort(unique(weather$station))
```

```{r}
sort(unique(mpsz$SUBZONE_N))
```

```{r}
mpsz <- mpsz %>%
  mutate(SUBZONE_N = case_when(
    SUBZONE_N == "ADMIRALTY" ~ "Admiralty",
    SUBZONE_N == "ANG MO KIO TOWN CENTRE" ~ "Ang Mo Kio",
    SUBZONE_N %in% c("CHANGI AIRPORT", "CHANGI BAY", 
                     "CHANGI POINT", "CHANGI WEST") ~ "Changi",
    SUBZONE_N == "CHOA CHU KANG CENTRAL" ~ "Choa Chu Kang (South)",
    SUBZONE_N == "CLEMENTI CENTRAL" ~ "Clementi",
    SUBZONE_N == "EAST COAST" ~ "East Coast Parkway",
    SUBZONE_N == "JURONG WEST CENTRAL" ~ "Jurong (West)",
    SUBZONE_N == "JURONG ISLAND AND BUKOM" ~ "Jurong Island",
    SUBZONE_N == "NEWTON CIRCUS" ~ "Newton",
    SUBZONE_N %in% c("PASIR PANJANG 1", "PASIR PANJANG 2") ~ "Pasir Panjang",
    SUBZONE_N %in% c("PAYA LEBAR EAST", "PAYA LEBAR NORTH", 
                     "PAYA LEBAR WEST") ~ "Paya Lebar",
    SUBZONE_N == "PULAU UBIN" ~ "Pulau Ubin",
    SUBZONE_N %in% c("SELETAR", "SELETAR AEROSPACE PARK") ~ "Seletar",
    SUBZONE_N %in% c("SEMBAWANG CENTRAL", "SEMBAWANG EAST", "SEMBAWANG NORTH",
                     "SEMBAWANG SPRINGS", "SEMBAWANG STRAITS") ~ "Sembawang",
    SUBZONE_N == "SENTOSA" ~ "Sentosa Island",
    SUBZONE_N == "TAI SENG" ~ "Tai Seng",
    SUBZONE_N == "TUAS BAY" ~ "Tuas South",
    TRUE ~ SUBZONE_N
  ))
```

## 3.2 Join Dataset

```{r}
weather_map <- left_join(mpsz, weather,
                         by = c("SUBZONE_N" = "station"),
                         relationship = "many-to-many")
```

## 3.3 Remove Unnecessary Columns

```{r}
weather_map <- subset(weather_map, select = -c(OBJECTID, SUBZONE_NO, SUBZONE_C,
                                       PLN_AREA_C, REGION_C, FMEL_UPD_D, 
                                       CA_IND, INC_CRC))
```

## 3.4 Rename Columns

```{r}
weather <- weather %>%
  rename(Station = station,
         Year = year,
         Month = month,
         Day = day,
         rainfall_total = daily_rainfall_total_mm,
         rainfall_30 = highest_30_min_rainfall_mm,
         rainfall_60 = highest_60_min_rainfall_mm,
         rainfall_120 = highest_120_min_rainfall_mm,
         mean_temp = mean_temperature_c,
         max_temp = maximum_temperature_c,
         min_temp = minimum_temperature_c,
         mean_wind = mean_wind_speed_km_h,
         max_wind = max_wind_speed_km_h)
```

```{r}
weather_map <- weather_map %>%
  rename(Station = SUBZONE_N,
         Area = PLN_AREA_N,
         Region = REGION_N,
         Year = year,
         Month = month,
         Day = day,
         rainfall_total = daily_rainfall_total_mm,
         rainfall_30 = highest_30_min_rainfall_mm,
         rainfall_60 = highest_60_min_rainfall_mm,
         rainfall_120 = highest_120_min_rainfall_mm,
         mean_temp = mean_temperature_c,
         max_temp = maximum_temperature_c,
         min_temp = minimum_temperature_c,
         mean_wind = mean_wind_speed_km_h,
         max_wind = max_wind_speed_km_h)
```

## 3.5 Remove Missing Records

Define list of stations:

```{r}
stations <- c("Admiralty", "Ang Mo Kio", "Changi", "Choa Chu Kang (South)",
              "Clementi", "East Coast Parkway", "Jurong (West)",
              "Jurong Island", "Newton", "Pasir Panjang", "Paya Lebar",
              "Pulau Ubin", "Seletar", "Sembawang", "Sentosa Island",
              "Tai Seng", "Tuas South")
```

```{r}
weather <- weather %>% 
  filter(!(Station %in% stations & (is.na(rainfall_total) | is.na(rainfall_30) | 
                                    is.na(rainfall_60) | is.na(rainfall_120) | 
                                    is.na(mean_temp) | is.na(max_temp) | 
                                    is.na(min_temp) | is.na(mean_wind) | 
                                    is.na(max_wind))))
```

```{r}
weather_map <- weather_map %>% 
  filter(!(Station %in% stations & (is.na(rainfall_total) | is.na(rainfall_30) | 
                                    is.na(rainfall_60) | is.na(rainfall_120) | 
                                    is.na(mean_temp) | is.na(max_temp) | 
                                    is.na(min_temp) | is.na(mean_wind) | 
                                    is.na(max_wind))))
```

## 3.6 Handling Date Data

```{r}
weather <- weather %>%
  mutate(
    yearmonth = make_date(Year, Month, 1)
  )
```

```{r}
weather_map <- weather_map %>%
  mutate(
    yearmonth = make_date(Year, Month, 1)
  )
```

## 3.7 Derive Parameters

In the analysis, we aim to provide several aggregations to see the monthly weather conditions in the form of geospatial map. The following are the variables that we aim to show in the chart:

**Weather Parameter:**

1.  Rainfall
2.  Wind Speed
3.  Temperature

**Measurement Options:**

1.  Mean
2.  Maximum
3.  Frequency

### 3.7.1 Rainfall Parameters

To define the frequency of rainfall, we will use **"Heavy Rain"** as the baseline to define the frequency of rainfall in a defined period of time (weekly/monthly/quarterly).

::: tabset-pane
### Ship Dataframe

::: {.table .table-striped .table-hover .table-bordered}
| Rain Type            | Total Daily Rainfall (mm) |
|----------------------|---------------------------|
| No Rain              | 0                         |
| Very Light Rain      | 0.1 - 0.9                 |
| Light Rain           | 1.0 - 10                  |
| Moderate Rain        | 11 - 30                   |
| **Heavy Rain**       | **31 - 70**               |
| Very Heavy Rain      | 71 - 150                  |
| Extremely Heavy Rain | \> 151                    |
:::
:::

## 3.8 Combine Geometry

```{r}
weather_map <- weather_map %>%
  group_by(Station) %>%
  mutate(geometry = st_union(geometry)) %>%
  mutate(geometry = st_cast(geometry, "MULTIPOLYGON")) %>%
  ungroup()
```

```{r}
# Create a dataset with all combinations of yearmonth and Station (to keep all stations)
all_combinations <- weather_map %>%
  st_drop_geometry() %>% # Drop geometry temporarily
  distinct(yearmonth, Station) 

# Merge the combinations back to weather_map to fill in missing rainfall data
monthly_rainfall <- weather_map %>%
  group_by(yearmonth, Station, geometry) %>%
  summarize(
    max_rainfall = if (all(is.na(rainfall_total))) NA_real_ else max(rainfall_total, na.rm = TRUE),
    mean_rainfall = if (all(is.na(rainfall_total))) NA_real_ else mean(rainfall_total, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  right_join(all_combinations, by = c("yearmonth", "Station")) %>%
  arrange(yearmonth, Station)
```

```{r}
months_2024 <- seq(ymd("2024-01-01"), ymd("2024-12-01"), by = "month")

# Separate rows with missing yearmonth
stations_missing_yearmonth <- monthly_rainfall %>%
  filter(is.na(yearmonth)) %>%
  # Duplicate rows for each month
  mutate(yearmonth = list(months_2024)) %>%
  unnest(yearmonth)

monthly_rainfall <- monthly_rainfall %>%
  filter(!is.na(yearmonth)) %>%
  bind_rows(stations_missing_yearmonth) %>%
  arrange(Station, yearmonth)
```

Filter to January

```{r}
jan_rainfall <- monthly_rainfall %>% 
  filter(yearmonth == "2024-01-01")
```

```{r}
jan_rainfall_with_data <- jan_rainfall %>%
  filter(!is.na(max_rainfall))
```

```{r, fig.width=10, fig.height=8}
tmap_mode("plot")
 
tm_shape(jan_rainfall) +
  tm_layout(
    main.title = "January Max Rainfall (mm)",
    main.title.position = "center",
    main.title.size = 1.2,
    legend.position = c("RIGHT", "BOTTOM"),
    legend.title.size = 0.8,
    legend.text.size = 0.8,
    legend.outside = TRUE,
    legend.outside.position = "bottom",
    legend.frame = FALSE,
    frame = TRUE
  ) +
  tm_shape(jan_rainfall_with_data) +
  tm_symbols(
    col = "max_rainfall", 
    palette = "Blues",
    title.col = "Max Rainfall (mm)",
    popup.vars = c("Station", "max_rainfall"),
    legend.size.show = FALSE
  ) +
  tm_shape(jan_rainfall_with_data) +
  tm_text("Station", size = 0.7, col = "black", shadow = FALSE, ymod=-1) +
  tm_grid(alpha = 0.2) +
  tm_basemap("CartoDB.Positron")
```
