---
title: "Take-home Exercise 2"
author: "Brigitta Karen Tsai"
date: "March 3, 2025"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  message: false
  freeze: true
---

# Be Tradewise or Otherwise

# 1 Overview

## 1.1 The Background

## 1.2 The Data

For this analysis, the data will be taken from [SingStat](https://www.singstat.gov.sg/find-data/search-by-theme/trade-and-investment/merchandise-trade/latest-data), the following are the list of data used:

1.  **Merchandise Trade by Region and Selected Markets**
    1.  Imports
    2.  Domestic Exports
    3.  Re-Exports

## 1.3 The Task

There are several tasks assigned for this paper:

1.  Select 3 visualisations from [this page](https://www.singstat.gov.sg/modules/infographics/singapore-international-trade), comment the pros and cons and provide the sketches of the make-over
2.  Create the makeover of the 3 data visualisation critic
3.  Analyse the data with time-series analysis by complimenting the analysis using appropriate visualisation methods

# 2 Getting Started

## 2.1 Install and Load R Packages

```{r}
pacman::p_load(tidyverse, tsibble, feasts, fable, seasonal, lubridate,
               data.table, dplyr)
```

## 2.2 Import Data

::: panel-tabset
### Imports

```{r}
imports <- read_csv("data/imports.csv")
```

### Domestic Exports

```{r}
dom_exports <- read_csv("data/dom_exports.csv")
```

### Re-Exports

```{r}
re_exports <- read_csv("data/re_exports.csv")
```
:::

## 2.3 Data Wrangling

### 2.3.1 Processing Imports Data

Let us have a quick glance of the dataframe using the code below.

```{r}
tibble(imports)
```

For more enhanced analysis, let us split the dataframe into 2, by continent and by country

::: panel-tabset
### Country Level

```{r}
imports_country <- imports[-c(1:9, 11, 12, 43, 85, 121, 136, 171:187), ]
```

```{r}
colnames(imports_country) <- imports_country[1, ]
imports_country <- imports_country[-1, ]
```

```{r}
imports_country <- imports_country %>% 
  pivot_longer(cols = -1, names_to = "Date", values_to = "Value") %>% 
  pivot_wider(names_from = colnames(imports_country)[1], values_from = "Value")
```

```{r}
imports_country$`Date` <- ym(
  imports_country$`Date`
)
```

```{r}
imports_country <- imports_country %>%
  mutate(
    across(-Date, as.numeric)
  )
```

```{r}
imports_country <- imports_country %>% 
  mutate(Year = year(Date))
```

```{r}
imports_country <- imports_country %>% 
  select(Year, everything(), -Date)
```

```{r, warning=FALSE}
imports_country <- imports_country %>% 
  group_by(Year) %>%
  summarise(across(where(is.numeric), sum, na.rm = TRUE))
```

### Continent Level

```{r}
imports_continent <- imports[c(10, 12, 43, 85, 121, 136), ]
```

```{r}
colnames(imports_continent) <- imports_continent[1, ]
imports_continent <- imports_continent[-1, ]
```

```{r}
imports_continent <- imports_continent %>% 
  pivot_longer(cols = -1, names_to = "Date", values_to = "Value") %>% 
  pivot_wider(names_from = colnames(imports_continent)[1], values_from = "Value")
```

```{r}
imports_continent$`Date` <- ym(
  imports_continent$`Date`
)
```

```{r}
imports_continent <- imports_continent %>%
  mutate(
    across(-Date, as.numeric)
  )
```

```{r}
imports_continent <- imports_continent %>% 
  mutate(Year = year(Date))
```

```{r}
imports_continent <- imports_continent %>% 
  select(Year, everything(), -Date)
```

```{r}
imports_continent <- imports_continent %>% 
  group_by(Year) %>%
  summarise(across(where(is.numeric), sum, na.rm = TRUE))
```
:::

### 2.3.2 Processing Domestic Exports Data

Let us apply the same steps to both domestic exports and re-exports dataframe

::: panel-tabset
### Country Level

```{r}
domexp_country <- dom_exports[-c(1:9, 11, 12, 43, 85, 121, 136, 171:191), ]
```

```{r}
colnames(domexp_country) <- domexp_country[1, ]
domexp_country <- domexp_country[-1, ]
```

```{r}
domexp_country <- domexp_country %>% 
  pivot_longer(cols = -1, names_to = "Date", values_to = "Value") %>% 
  pivot_wider(names_from = colnames(domexp_country)[1], values_from = "Value")
```

```{r}
domexp_country$`Date` <- ym(
  domexp_country$`Date`
)
```

```{r}
domexp_country <- domexp_country %>%
  mutate(
    across(-Date, as.numeric)
  )
```

```{r}
domexp_country <- domexp_country %>% 
  mutate(Year = year(Date))
```

```{r}
domexp_country <- domexp_country %>% 
  select(Year, everything(), -Date)
```

```{r, warning=FALSE}
domexp_country <- domexp_country %>% 
  group_by(Year) %>%
  summarise(across(where(is.numeric), sum, na.rm = TRUE))
```

### Continent Level

```{r}
domexp_continent <- dom_exports[c(10, 12, 43, 85, 121, 136), ]
```

```{r}
colnames(domexp_continent) <- domexp_continent[1, ]
domexp_continent <- domexp_continent[-1, ]
```

```{r}
domexp_continent <- domexp_continent %>% 
  pivot_longer(cols = -1, names_to = "Date", values_to = "Value") %>% 
  pivot_wider(names_from = colnames(domexp_continent)[1], values_from = "Value")
```

```{r}
domexp_continent$`Date` <- ym(
  domexp_continent$`Date`
)
```

```{r}
domexp_continent <- domexp_continent %>%
  mutate(
    across(-Date, as.numeric)
  )
```

```{r}
domexp_continent <- domexp_continent %>% 
  mutate(Year = year(Date))
```

```{r}
domexp_continent <- domexp_continent %>% 
  select(Year, everything(), -Date)
```

```{r}
domexp_continent <- domexp_continent %>% 
  group_by(Year) %>%
  summarise(across(where(is.numeric), sum, na.rm = TRUE))
```
:::

### 2.3.3 Processing Re-Exports Data

::: panel-tabset
### Country Level

```{r}
reexp_country <- re_exports[-c(1:9, 11, 12, 43, 85, 121, 136, 171:191), ]
```

```{r}
colnames(reexp_country) <- reexp_country[1, ]
reexp_country <- reexp_country[-1, ]
```

```{r}
reexp_country <- reexp_country %>% 
  pivot_longer(cols = -1, names_to = "Date", values_to = "Value") %>% 
  pivot_wider(names_from = colnames(reexp_country)[1], values_from = "Value")
```

```{r}
reexp_country$`Date` <- ym(
  reexp_country$`Date`
)
```

```{r}
reexp_country <- reexp_country %>%
  mutate(
    across(-Date, as.numeric)
  )
```

```{r}
reexp_country <- reexp_country %>% 
  mutate(Year = year(Date))
```

```{r}
reexp_country <- reexp_country %>% 
  select(Year, everything(), -Date)
```

```{r, warning=FALSE}
reexp_country <- reexp_country %>% 
  group_by(Year) %>%
  summarise(across(where(is.numeric), sum, na.rm = TRUE))
```

### Continent Level

```{r}
reexp_continent <- re_exports[c(10, 12, 43, 85, 121, 136), ]
```

```{r}
colnames(reexp_continent) <- reexp_continent[1, ]
reexp_continent <- reexp_continent[-1, ]
```

```{r}
reexp_continent <- reexp_continent %>% 
  pivot_longer(cols = -1, names_to = "Date", values_to = "Value") %>% 
  pivot_wider(names_from = colnames(reexp_continent)[1], values_from = "Value")
```

```{r}
reexp_continent$`Date` <- ym(
  reexp_continent$`Date`
)
```

```{r}
reexp_continent <- reexp_continent %>%
  mutate(
    across(-Date, as.numeric)
  )
```

```{r}
reexp_continent <- reexp_continent %>% 
  mutate(Year = year(Date))
```

```{r}
reexp_continent <- reexp_continent %>% 
  select(Year, everything(), -Date)
```

```{r}
reexp_continent <- reexp_continent %>% 
  group_by(Year) %>%
  summarise(across(where(is.numeric), sum, na.rm = TRUE))
```
:::

### 2.3.4 Combining Domestic Exports and Re-Exports Data

Using the code chunk below, we will combine both domestic exports and re-exports data

::: panel-tabset
### Country

```{r}
exports_country <- domexp_country + reexp_country
exports_country$Year <- domexp_country$Year
exports_country <- exports_country %>% relocate(Year)
```

### Continent

```{r}
exports_continent <- domexp_continent + reexp_continent
exports_continent$Year <- domexp_continent$Year
exports_continent <- exports_continent %>% relocate(Year)
```
:::

### 2.3.5 Joining Import and Export Data

::: panel-tabset
### Country Level

```{r}
exports_country <- exports_country %>% mutate(Type = "Exports")
imports_country <- imports_country %>% mutate(Type = "Imports")
```

```{r}
trade_country <- bind_rows(exports_country, imports_country)
```

```{r}
trade_country <- trade_country %>% arrange(Year)
```

```{r}
trade_country <- trade_country %>% select(Year, Type, everything())
```

### Continent Level

```{r}
exports_continent <- exports_continent %>% mutate(Type = "Exports")
imports_continent <- imports_continent %>% mutate(Type = "Imports")
```

```{r}
trade_continent <- bind_rows(exports_continent, imports_continent)
```

```{r}
trade_continent <- trade_continent %>% arrange(Year)
```

```{r}
trade_continent <- trade_continent %>% select(Year, Type, everything())
```
:::

## 2.4 Save Data

For easier usage of cleaned dataframe, let us save it to csv file and load it to R environment

```{r}
write.csv(trade_country, "data/trade_country.csv", row.names = FALSE)
write.csv(trade_continent, "data/trade_continent.csv", row.names = FALSE)
```

## 2.5 Load Final Data

Finally, use the code below to load the final dataframe to R environment

```{r}
trade_country <- read_csv("data/trade_country.csv")
```

```{r}
trade_continent <- read_csv("data/trade_continent.csv")
```

# 3 Data Visualization

To begin with the imports and exports analysis, we are going to refer to the SingStat website to look up 3 visualisations that we find interesting. However, to enhance the analysis, we will comment the pros and cons of each visual reference and create an improved version of the visuals.

## 3.1 Comments on Visualizations

Let us begin this section with the pros and cons of 3 visualisations.

### 3.1.1 Total Merchandise Trade at Current Price, 2020-2024

Let us take a look at the first visualization for total merchandise trade in 2020-2024.

::: panel-tabset
### Original

The figure below is showing the total merchandise trade comparison for each year from 2020-2024. What could be improved from this data visualisation?

![](images/clipboard-471416878.png)

**Pros:**

1.  The visual design of the horizontal bar chart fits the theme of the data presented, which helps audience understand the context efficiently
2.  The data is sorted in descending order based on the year, showing the latest year data on top of the chart, which allows audience to view the most recent information first

**Cons:**

1.  The purpose of this chart is to compare the import and export of each year stated. However, the bar chart spacing does not indicate this comparison. To properly show the comparison, it should be visualized as clustered bar chart, where there is extra spacing for different years
2.  Although the choice of color palette is aesthetically nice, the color for all "imports" and all "exports" should be consistent and the legend should be shown in the chart. The current color does not highlight the difference between import and export as it is the same color with different opacity level

### Visual Make-Over

```{r, fig.width=8, fig.height=6}
trade_summary <- trade_continent %>%
  filter(Year >= 2020 & Year <= 2024) %>%  
  group_by(Year, Type) %>%
  summarise(Total = sum(America, Asia, Europe, Oceania, Africa, na.rm = TRUE), .groups = "drop")

trade_summary$Year <- factor(trade_summary$Year, levels = sort(unique(trade_summary$Year), decreasing = FALSE))

ggplot(trade_summary, aes(y = Year, x = Total / 1000, fill = Type)) +  
  geom_bar(stat = "identity", position = position_dodge(width = 0.6), width = 0.5) +  
  scale_fill_manual(values = c("Exports" = "skyblue", "Imports" = "lightcoral")) + 
  labs(title = "OVERALL EXPORTS AND IMPORTS OF SERVICES, 2020-2024",
       x = "S$ Billion", y = "Year") +
  theme_minimal(base_size = 14) +  
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold", size = 16), 
    legend.title = element_blank(),  
    legend.position = "bottom",
    plot.background = element_rect(fill = "#E3ECF1", color = NA)
  ) +
  geom_text(aes(label = round(Total / 1000, 1)), 
            position = position_dodge(width = 0.6), hjust = -0.3, size = 4, color = "black") +
  geom_label(data = trade_summary %>% group_by(Year) %>%
               summarise(Total = sum(Total) / 1000, .groups = "drop"), 
             aes(y = Year, x = 900,  
                 label = paste0("Total: S$ ", round(Total, 1), "B")),
             fill = "white", color = "black", fontface = "bold", size = 4, 
             label.size = 0.3, label.r = unit(5, "pt")) +
  scale_x_continuous(limits = c(0, 1000),
                     labels = scales::label_number())
```

What are the key improvements on this visual?

1.  The colors are standardized for both imports and exports, it ensures a clear definition of imports value and exports value.
2.  The charts are clustered and grouped in years, showing a significant gap between every year's data.
:::

### 3.1.2 Merchandise Trade Performance With Major Trading Partners, 2024

::: panel-tabset
### Original

The figure below represents the total merchandise trade of the top 10 countries in 2024. Let us discuss the pros and cons of the visual shown below.

![](images/clipboard-2874159398.png)

**Pros:**

1.  The different bubble sizes that reflects the trade value with each country helps to highlight the countries with highest values more quickly.
2.  The x-axis and y-axis range is symmetrical, showing accurate representations. Moreover, as the chart is diagonally split, it highlights whether the country has more export or import values.

**Cons:**

1.  The placement of x-label and y-label is too close and can be misleading at first sight. For better visualisation, the label should be put at the other end of the line to avoid misinterpretations.
2.  The color representing each country does not give any significant insight. Instead,

### Visual Make-Over

Before the make-over, let us do some data wrangling to match the original visualisation's data structure. First, let us filter to 2024 data using the code below.

```{r}
trade <- trade_country %>% filter(Year == 2024)
```

As the original visual shows the **European Union**, let us group all the countries that are part of the European Union.

```{r}
eu_countries <- c('Austria', 'Belgium', 'Bulgaria', 'Croatia', 'Cyprus',
                  'Czech Rep', 'Denmark', 'Estonia', 'Finland', 'France',
                  'Germany', 'Greece', 'Hungary', 'Ireland', 'Italy', 'Latvia',
                  'Lithuania', 'Luxembourg', 'Malta', 'Netherlands', 'Poland',
                  'Portugal', 'Romania', 'Slovakia', 'Slovenia', 'Spain', 
                  'Svalbard And Jan Mayen Islands','Sweden')

trade$EU <- rowSums(trade[eu_countries])
```

Now, let us pivot back the data and change the values from millions to billions using the code below.

```{r}
trade <- trade %>%
  pivot_longer(cols = -c(Year, Type), names_to = "Country", values_to = "value") %>%
  pivot_wider(names_from = Type, values_from = value) %>% 
  mutate(
    Imports = Imports/1000,
    Exports = Exports/1000
  )
```

Let us define the color and the opacity of each country based on the imports or exports value. If exports value is higher, it will show green color, and blue if otherwise. The opacity represents how big the amount of the imports or exports in each country. The more solid the color, means the higher the trade value is.

```{r}
trade <- trade %>%
  mutate(
    total_trade = Imports + Exports,
    color = ifelse(Exports > Imports, 
                   rgb(34/255, 139/255, 34/255, alpha = 1),
                   rgb(70/255, 130/255, 180/255, alpha = 1)
    ),
    opacity = ifelse(Exports > Imports, 
                 0.5 + (0.7 * Exports / max(Exports, na.rm = TRUE)),
                 0.5 + (0.7 * Imports / max(Imports, na.rm = TRUE)))

  )
```

```{r}
trade <- trade %>% 
  arrange(desc(total_trade)) %>% 
  slice_head(n = 10) 
```

```{r, fig.width=8, fig.height=8}
ggplot(trade, aes(x = Exports, y = Imports)) +
    geom_tile(data = expand.grid(x = seq(0, 100, by = 0.5),  
                             y = seq(0, 100, by = 0.5)), 
          aes(x = x, y = y, fill = x > y), width = 0.5, height = 0.5, color = NA) +
    scale_fill_manual(values = c(
        "TRUE" = rgb(200/255, 255/255, 200/255, alpha = 0.2),
        "FALSE" = rgb(173/255, 216/255, 230/255, alpha = 0.2)
    )) +
  
    geom_point(aes(color = color, alpha = opacity), shape = 16, size = 5) +

    geom_text(aes(label = paste(Country, "\n", round(total_trade, 1))), 
              size = 4, color = "black", vjust = -0.5) +

    geom_abline(intercept = 0, slope = 1, linetype = NA, size = 1) +
    scale_x_continuous(limits = c(0, 100), breaks = seq(0, 100, 10), minor_breaks = NULL) +
    scale_y_continuous(limits = c(0, 100), breaks = seq(0, 100, 10), minor_breaks = NULL) +
    labs(x = "Exports (S$ Billion)", y = "Imports (S$ Billion)",
         title = "Merchandise Trade Performance With Major Trading Partners (2024)") +
    scale_color_identity() +
    scale_alpha_continuous(range = c(0.1, 1)) +
    theme_minimal() + 
    theme(
        plot.title = element_text(hjust=0.5),
        panel.grid.major = element_line(color = "whitesmoke", size = 0.4),
        panel.grid.minor = element_blank(),
        panel.background = element_rect(fill = "transparent", color = NA),
        plot.background = element_rect(fill = "transparent", color = NA),
        legend.position = "none"
    )
```

How is this visual different from the original visualisation?

1.  Instead of representing each country with different colors, each dot color represents whether the exports or imports value dominates the overall trade value, where green represents exports and blue represents imports
2.  The opacity level shows how big the amount of exports or imports with each trading partners.
3.  The x-label and y-label is re-positioned to avoid misinterpretation of axis values.
:::

### 3.1.3 Non-Oil Domestic Exports (2024)

::: panel-tabset
### Original

Now let us have a look at the final visualisation, showing the non-oil domestic exports by major commodity sections in 2024. It shows the percentage of share of each non-oil goods trade category. Let us examine the pros and cons of the following visualisation.

![](images/clipboard-3962379803.png)

**Pros:**

1.  The visual above shows a detailed insight of each non-oil goods, showing both trade values and the percentage of share clearly.
2.  Each category is highlighted in different color palettes, highlighting different goods under non-oil category.

**Cons:**

1.  The data is stacked into one bar. Although it visually fits the concept of the data presented, the data only shows the data for year 2024, hence, it will be better if it is separated into different bars for better readability.
2.  The values are not sorted and it is uses both left and right side of the bar chart. It is not very efficient for readers as it may take sometime to figure out the category of each bar stack. It also can be misleading as the value is in random order.

### Visual Make-Over

::: {details="Click to Expand"}
Before showing the visual make-over, it is necessary to do some data wrangling as it is from different data source, which is the **Merchandise Trade by Commodity Section** **(At Current Price), Monthly** dataset. Let us prepare the data using the code below.

```{r}
nonoil <- read_csv("data/nonoil.csv")
```
:::

```{r}
nonoil <- nonoil[c(10, 57:65), ]
```
:::
